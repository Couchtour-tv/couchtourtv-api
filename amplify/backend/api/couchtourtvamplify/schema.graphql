enum InvitationStatus {
  accepted
  invited
  rejected
  expired
}

enum BandMerchType {
  Hat
  TShirt
  Hoodie
  CD
  Poster
}

enum CardStatus {
  active
  expired
  insufficientFunds
  delinquint
  stolen
  unverified
  international
}

enum TransactionStatus {
  initiated
  complete
  errored
  canceled
}

enum MerchandiseType {
  vod
  bandMerch
  tips
  bandChat
  ticket_stream_event
  subscription
  package
}

type VODMetaData {
  band: String
  date: String
  venue: String
  location: String
  maestro_channel: String
  description: String
  price: String
  videoURL: String
}

type StreamMetaData {
  id: ID!
  streamId: String
  eventId: String
  bandName: String
  promoter: String
  promoterLogo: String
  timeOfEvent: String
  isLive: Boolean
  landingImageUrl: String
  eventFeature: EventFeature
  priceDescription: PriceDescription
  eventDetail: EventDetail
}

type EventDetail {
  id: ID!
  description: String
  type: String
}

type PriceDescription {
  id: ID!
  description: String
  type: String
}

type EventFeature {
  id: ID!
  description: String
  type: String
}

type TipsMetaData {
  id: ID!
  tipId: String
  name: String
  type: String
  description: String
  unitLabel: String
  url: String
}

type BandChatMetaData {
  id: ID!
  priceId: String
  band: String
}

type TicketMetaData {
  id: ID!
  ticketId: String
  eventId: String
  priceId: String
  title: String
  price: Int
  image: String
  successUrl: String
  cancelUrl: String
  boxedItems: [TicketBoxedItem]
  attributes: [TicketAttribute]
  soldOut: Boolean
}

type TicketBoxedItem {
  id: ID!
  description: String!
}

type TicketAttribute {
  id: ID!
  description: String!
}

type Event @model {
  id: ID!
  eventId: String
  bandName: String
  promoter: String
  promoterLogo: String
  timeOfEvent: String
  isLive: Boolean
  landingImageUrl: String
  eventFeature: EventFeature
  priceDescription: PriceDescription
  eventDetail: EventDetail
}

type CartMerchandise
  @model(queries: null)
  @key(name: "byCart", fields: ["cartId", "merchandiseId"])
  @key(name: "byMerchandise", fields: ["merchandiseId", "cartId"]) {
  id: ID!
  merchandiseId: ID!
  cartId: ID!
  merchandise: Merchandise! @connection(fields: ["merchandiseId"])
  cart: Cart! @connection(fields: ["cartId"])
}

type Transaction
  @model
  @key(name: "userIDTransactionIndex", fields: ["userID"])
  @key(name: "creditCardIdTransactionIndex", fields: ["creditCardId"]) {
  id: ID!
  userID: ID!
  merchID: ID
  merchandise: [MerchandiseTransaction]
    @connection(keyName: "byTransaction", fields: ["id"])
  attemptSuccess: Boolean
  errorObject: String
  paymentIntent: ID
  creditCard: CreditCard @connection(fields: ["creditCardId"])
  creditCardId: ID
  Purchase: Purchase @connection(fields: ["paymentIntent"])
  purchaseId: ID
}

type MerchandiseTransaction
  @model(queries: null)
  @key(name: "byTransaction", fields: ["transactionId"])
  @key(name: "byMerchandiseTransaction", fields: ["merchandiseId"]) {
  id: ID!
  transactionId: ID!
  merchandiseId: ID!
  transaction: Transaction! @connection(fields: ["transactionId"])
  merchandise: Merchandise! @connection(fields: ["merchandiseId"])
}

type Entitlement
  @model
  @key(name: "byUserEntitlement", fields: ["userID", "merchandiseId"]) {
  id: ID!
  merchandiseId: ID!
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
  userID: ID!
}

type Cart @model {
  id: ID!
  merchandise: [CartMerchandise] @connection(keyName: "byCart", fields: ["id"])
}

type Band @model {
  id: ID!
  bandName: String
  createdBy: String
  updatedBy: String
  website: String
  logo: Picture @connection(fields: ["pictureId"])
  pictureId: ID
  email: String
  merchandise: [Merchandise] @connection(keyName: "byBand", fields: ["id"])
  socialMediaLinks: SocialMediaLinks
}

type SocialMediaLinks {
  twitterLink: String
  facebookLink: String
  instagramLink: String
  twitchLink: String
  youtubeLink: String
  tiktokLink: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Picture @model @aws_cognito_user_pools {
  id: ID!
  name: String
  owner: String
  file: S3Object
}

type Merchandise
  @model
  @key(name: "byBand", fields: ["bandId"])
  @key(name: "purchaseIdMerchandiseIndex", fields: ["id"])
  @key(name: "transactionIdMerchandiseIndex", fields: ["id"])
  @key(
    name: "getMerchandiseBySubscriptionId"
    fields: ["subscriptionId"]
    queryField: "getMerchandiseBySubscriptionId"
  )
  @key(
    name: "getMerchandiseByPackageId"
    fields: ["packageId"]
    queryField: "getMerchandiseByPackageId"
  ) {
  id: ID!
  type: MerchandiseType
  transactions: [MerchandiseTransaction]
    @connection(keyName: "byMerchandiseTransaction", fields: ["id"])
  merchandisePurchases: [MerchandisePurchase]
    @connection(keyName: "byMerchandise", fields: ["id"])
  active: Boolean
  createdBy: String
  updatedBy: String
  isEvent: Boolean
  name: String
  description: String
  image: Picture @connection(fields: ["pictureId"])
  pictureId: ID
  date: String
  eventId: String
  productId: String
  priceId: String
  price: String
  stripeMetaData: String
  carts: [CartMerchandise] @connection(keyName: "byMerchandise", fields: ["id"])
  band: Band @connection(fields: ["bandId"])
  bandId: ID
  VODMetaData: VODMetaData
  bandMerchType: BandMerchType
  subscriptionMerchandise: [SubscriptionMerchandise]
    @connection(keyName: "byMerchandiseSubscription", fields: ["id"])
  packageMerchandise: [PackageMerchandise]
    @connection(keyName: "byMerchandisePackage", fields: ["id"])
  subscriptionModel: SubscriptionModel @connection(fields: ["subscriptionId"])
  subscriptionId: ID
  package: Package @connection(fields: ["packageId"])
  packageId: ID
}

type SubscriptionMerchandise
  @model(queries: null)
  @key(
    name: "byMerchandiseSubscription"
    fields: ["merchandiseId", "subscriptionId"]
  )
  @key(name: "bySubscription", fields: ["subscriptionId", "merchandiseId"]) {
  id: ID!
  merchandiseId: ID!
  subscriptionId: ID!
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
  subscription: SubscriptionModel @connection(fields: ["subscriptionId"])
}

type SubscriptionModel @model {
  id: ID!
  name: String
  description: String
  price: String
  priceId: String
  productId: String
  active: Boolean
  merchandiseId: ID
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
  subscriptionMerchandise: [SubscriptionMerchandise]
    @connection(keyName: "bySubscription", fields: ["id"])
}

type PackageMerchandise
  @model(queries: null)
  @key(name: "byMerchandisePackage", fields: ["merchandiseId", "packageId"])
  @key(name: "byPackage", fields: ["packageId", "merchandiseId"]) {
  id: ID!
  merchandiseId: ID!
  packageId: ID!
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
  package: Package @connection(fields: ["packageId"])
}

type Package @model {
  id: ID!
  name: String
  description: String
  price: String
  priceId: String
  productId: String
  active: Boolean
  merchandiseId: ID
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
  packageMerchandise: [PackageMerchandise]
    @connection(keyName: "byPackage", fields: ["id"])
}

type MerchandisePurchase
  @model(queries: null)
  @key(name: "byPurchase", fields: ["purchaseId", "merchandiseId"])
  @key(name: "byMerchandise", fields: ["merchandiseId", "purchaseId"]) {
  id: ID!
  purchaseId: ID
  merchandiseId: ID
  active: Boolean
  purchase: Purchase @connection(fields: ["purchaseId"])
  merchandise: Merchandise @connection(fields: ["merchandiseId"])
}

type Purchase
  @model
  @key(name: "userIDPurchasesIndex", fields: ["userID"])
  @key(name: "creditCardIdPurchaseIndex", fields: ["creditCardId"]) {
  id: ID!
  userID: ID!
  user: User
  merchandisePurchases: [MerchandisePurchase]
    @connection(keyName: "byPurchase", fields: ["id"])
  creditCard: CreditCard @connection(fields: ["creditCardId"])
  paymentIntent: ID
  transactions: Transaction @connection(fields: ["paymentIntent"])
  creditCardId: ID
  transactionId: ID
}

type User
  @model
  @key(
    name: "getUserByUsername"
    fields: ["username"]
    queryField: "getUserByUsername"
  ) {
  id: ID!
  completedSignUp: Boolean
  username: String!
  avatar: String
  picture: Picture @connection(fields: ["pictureId"])
  pictureId: ID
  awayMessageStatus: String
  chatRoomUser: [ChatRoomUser] @connection(keyName: "byUser", fields: ["id"])
  invitation: [Invitation] @connection(fields: ["id"])
  creditCards: [CreditCard]
    @connection(keyName: "userIDCreditCardIndex", fields: ["id"])
  transactions: [Transaction]
    @connection(keyName: "userIDTransactionIndex", fields: ["id"])
  purchases: [Purchase]
    @connection(keyName: "userIDPurchasesIndex", fields: ["id"])
  cogId: String
  emailVerified: Boolean
  loggedIn: Boolean
  email: String
  stripeCustomerId: String
  stripeCustomer: String
  subscriptionId: String
  accessToken: String
  idToken: String
  refreshToken: String
  cart: Cart @connection(fields: ["cartId"])
  cartId: ID
  entitlements: [Entitlement]
    @connection(keyName: "byUserEntitlement", fields: ["id"])
}

type CreditCard
  @model
  @key(
    name: "userIDCreditCardIndex"
    fields: ["userID"]
    queryField: "getCreditCardByUserID"
  ) {
  id: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  transactions: [Transaction]
    @connection(keyName: "creditCardIdTransactionIndex", fields: ["id"])
  purchases: [Purchase]
    @connection(keyName: "creditCardIdPurchaseIndex", fields: ["id"])
  status: CardStatus
  active: Boolean
  deleted: Boolean
  brand: String
  email: String
  expMonth: String
  expYear: String
  lastFour: String
  paymentMethodObj: String
  created: Int
  postalCode: String
  name: String
  previousCardId: ID
}

type ChatRoomUser
  @model
  @key(
    name: "byUser"
    fields: ["userID", "chatRoomID"]
    queryField: "getChatRoomUserByUserID"
  )
  @key(
    name: "byChatRoom"
    fields: ["chatRoomID", "userID"]
    queryField: "getChatRoomUsersByChatRoomID"
  ) {
  id: ID!
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}

type ChatRoom @model {
  id: ID!
  chatRoomUsers: [ChatRoomUser]
    @connection(keyName: "byChatRoom", fields: ["id"])
  messages: [Message] @connection(keyName: "byChatRoomM", fields: ["id"])
  lastMessageID: ID
  lastMessage: Message @connection(fields: ["lastMessageID"])
  invitation: [Invitation] @connection(keyName: "byChatRoomInv", fields: ["id"])
  chatRoomName: String
}

type Invitation
  @model
  @key(name: "byChatRoomInv", fields: ["chatRoomID"])
  @key(
    name: "invitationByInvitedUser"
    fields: ["invitedUserID", "createdByUserID"]
  )
  @key(
    name: "invitationByCreatedByUser"
    fields: ["createdByUserID", "invitedUserID"]
  ) {
  id: ID!
  invitedUser: User @connection(fields: ["invitedUserID"])
  createdByUser: User @connection(fields: ["createdByUserID"])
  invitedUserID: ID!
  createdByUserID: ID!
  chatRoomID: ID!
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
  status: InvitationStatus
}

type Message
  @model
  @key(
    name: "byChatRoomM"
    fields: ["chatRoomID", "createdAt"]
    queryField: "messagesByChatRoom"
  ) {
  id: ID!
  createdAt: String!
  content: String!
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}

type Subscription {
  newOnCreateMessage: Message @aws_subscribe(mutations: ["createMessage"])
}
