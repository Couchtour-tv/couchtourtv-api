AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for this Serverless application
Resources:
  ServerlessDeploymentBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DependsOn: []
  ServerlessDeploymentBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ServerlessDeploymentBucket
      PolicyDocument:
        Statement:
          - Action: "s3:*"
            Effect: Deny
            Principal: "*"
            Resource:
              - !Join
                - ""
                - - "arn:"
                  - !Ref "AWS::Partition"
                  - ":s3:::"
                  - !Ref ServerlessDeploymentBucket
                  - /*
              - !Join
                - ""
                - - "arn:"
                  - !Ref "AWS::Partition"
                  - ":s3:::"
                  - !Ref ServerlessDeploymentBucket
            Condition:
              Bool:
                "aws:SecureTransport": false
    DependsOn: []
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
    DependsOn: []
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-igw"
            - {}
        - Key: Network
          Value: Public
    DependsOn: []
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    DependsOn: []
  EIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: []
  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - EIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-${PublicSubnet1_AvailabilityZone}"
            - PublicSubnet1_AvailabilityZone: !GetAtt
                - PublicSubnet1
                - AvailabilityZone
        - Key: Network
          Value: Public
    DependsOn: []
  EIP2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: []
  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - EIP2
        - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-${PublicSubnet2_AvailabilityZone}"
            - PublicSubnet2_AvailabilityZone: !GetAtt
                - PublicSubnet2
                - AvailabilityZone
        - Key: Network
          Value: Public
    DependsOn: []
  AppSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/21
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-app-us-east-1a"
            - {}
        - Key: Network
          Value: Private
      VpcId: !Ref VPC
    DependsOn: []
  AppRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-app-${AppSubnet1_AvailabilityZone}"
            - AppSubnet1_AvailabilityZone: !GetAtt
                - AppSubnet1
                - AvailabilityZone
        - Key: Network
          Value: Private
    DependsOn: []
  AppRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref AppRouteTable1
      SubnetId: !Ref AppSubnet1
    DependsOn: []
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.8.0/22
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-public-us-east-1a"
            - {}
        - Key: Network
          Value: Public
      VpcId: !Ref VPC
    DependsOn: []
  PublicRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-public-${PublicSubnet1_AvailabilityZone}"
            - PublicSubnet1_AvailabilityZone: !GetAtt
                - PublicSubnet1
                - AvailabilityZone
        - Key: Network
          Value: Public
    DependsOn: []
  PublicRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1
    DependsOn: []
  PublicRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable1
      GatewayId: !Ref InternetGateway
    DependsOn:
      - InternetGatewayAttachment
  AppRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref AppRouteTable1
      NatGatewayId: !Ref NatGateway1
    DependsOn: []
  DBSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.12.0/22
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-db-us-east-1a"
            - {}
        - Key: Network
          Value: Private
      VpcId: !Ref VPC
    DependsOn: []
  DBRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-db-${DBSubnet1_AvailabilityZone}"
            - DBSubnet1_AvailabilityZone: !GetAtt
                - DBSubnet1
                - AvailabilityZone
        - Key: Network
          Value: Private
    DependsOn: []
  DBRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DBRouteTable1
      SubnetId: !Ref DBSubnet1
    DependsOn: []
  AppSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.16.0/21
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-app-us-east-1b"
            - {}
        - Key: Network
          Value: Private
      VpcId: !Ref VPC
    DependsOn: []
  AppRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-app-${AppSubnet2_AvailabilityZone}"
            - AppSubnet2_AvailabilityZone: !GetAtt
                - AppSubnet2
                - AvailabilityZone
        - Key: Network
          Value: Private
    DependsOn: []
  AppRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref AppRouteTable2
      SubnetId: !Ref AppSubnet2
    DependsOn: []
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.24.0/22
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-public-us-east-1b"
            - {}
        - Key: Network
          Value: Public
      VpcId: !Ref VPC
    DependsOn: []
  PublicRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-public-${PublicSubnet2_AvailabilityZone}"
            - PublicSubnet2_AvailabilityZone: !GetAtt
                - PublicSubnet2
                - AvailabilityZone
        - Key: Network
          Value: Public
    DependsOn: []
  PublicRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2
    DependsOn: []
  PublicRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable2
      GatewayId: !Ref InternetGateway
    DependsOn:
      - InternetGatewayAttachment
  AppRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref AppRouteTable2
      NatGatewayId: !Ref NatGateway2
    DependsOn: []
  DBSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.28.0/22
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-db-us-east-1b"
            - {}
        - Key: Network
          Value: Private
      VpcId: !Ref VPC
    DependsOn: []
  DBRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-db-${DBSubnet2_AvailabilityZone}"
            - DBSubnet2_AvailabilityZone: !GetAtt
                - DBSubnet2
                - AvailabilityZone
        - Key: Network
          Value: Private
    DependsOn: []
  DBRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DBRouteTable2
      SubnetId: !Ref DBSubnet2
    DependsOn: []
  DefaultSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "-1"
      DestinationSecurityGroupId: !GetAtt
        - VPC
        - DefaultSecurityGroup
      GroupId: !GetAtt
        - VPC
        - DefaultSecurityGroup
    DependsOn: []
  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Application Security Group
      SecurityGroupEgress:
        - Description: permit HTTPS outbound
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - DestinationPrefixListId: pl-63a5400a
          Description: permit HTTPS to S3
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationPrefixListId: pl-63a5400a
          Description: permit HTTP to S3
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - DestinationPrefixListId: pl-02cd2c6b
          Description: permit HTTPS to DynamoDB
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupIngress:
        - Description: permit HTTPS inbound
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-sg"
            - {}
    DependsOn: []
  DHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-DHCPOptionsSet"
            - {}
    DependsOn: []
  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
    DependsOn: []
  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName: !Sub
        - "com.amazonaws.${AWS::Region}.s3"
        - {}
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref AppRouteTable1
        - !Ref AppRouteTable2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Resource: "*"
            Action: "s3:*"
    DependsOn: []
  DynamodbVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName: !Sub
        - "com.amazonaws.${AWS::Region}.dynamodb"
        - {}
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref AppRouteTable1
        - !Ref AppRouteTable2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Resource: "*"
            Action: "dynamodb:*"
    DependsOn: []
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Ref "AWS::StackName"
      DBSubnetGroupDescription: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
    DependsOn: []
  RedshiftSubnetGroup:
    Type: "AWS::Redshift::ClusterSubnetGroup"
    Properties:
      Description: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
    DependsOn: []
  ElastiCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      CacheSubnetGroupName: !Ref "AWS::StackName"
      Description: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
    DependsOn: []
  DAXSubnetGroup:
    Type: "AWS::DAX::SubnetGroup"
    Properties:
      SubnetGroupName: !Ref "AWS::StackName"
      Description: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
    DependsOn: []
  CreateLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-create
    DependsOn: []
  GetLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-get
    DependsOn: []
  ListLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list
    DependsOn: []
  UpdateLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-update
    DependsOn: []
  DeleteLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-delete
    DependsOn: []
  PurchasesLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-purchases
    DependsOn: []
  BillingLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-billing
    DependsOn: []
  SendSMSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-sendSMS
    DependsOn: []
  DeviceActivateLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-deviceActivate
    DependsOn: []
  StripeSuccessfulCheckoutWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripeSuccessfulCheckoutWebhook
    DependsOn: []
  StripeHandleSubscriptionsWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripeHandleSubscriptionsWebhook
    DependsOn: []
  StripeHandleInvoiceWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripeHandleInvoiceWebhook
    DependsOn: []
  StripeEverythingWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripeEverythingWebhook
    DependsOn: []
  StripePaymentIntentSuccessWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripePaymentIntentSuccessWebhook
    DependsOn: []
  StripeChargeSuccessWebhookLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripeChargeSuccessWebhook
    DependsOn: []
  FetchUserMetaByEmailLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-fetchUserMetaByEmail
    DependsOn: []
  FetchAllPurchaseablesLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-fetchAllPurchaseables
    DependsOn: []
  PlayerDashanalyticsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-player-analytics
    DependsOn: []
  CreateDashchannelDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-create-channel-media-live
    DependsOn: []
  CreateDashchannelDashmediaDashpackageLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-create-channel-media-package
    DependsOn: []
  CreateDashoriginDashendpointDashmediaDashpackageLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-create-origin-endpoint-media-package
    DependsOn: []
  ListDashchannelsDashmediaDashpackageLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-channels-media-package
    DependsOn: []
  ListDashchannelsDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-channels-media-live
    DependsOn: []
  ListDashinputDashdevicesDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-input-devices-media-live
    DependsOn: []
  ListDashinputsDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-inputs-media-live
    DependsOn: []
  DescribeDashchannelDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-describe-channel-media-live
    DependsOn: []
  StopDashchannelDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stop-channel-media-live
    DependsOn: []
  StartDashchannelDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-start-channel-media-live
    DependsOn: []
  DeleteDashchannelDashmediaDashliveLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-delete-channel-media-live
    DependsOn: []
  DescribeDashharvestDashjobLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-describe-harvest-job
    DependsOn: []
  ListDashharvestDashjobsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-harvest-jobs
    DependsOn: []
  CreateDashharvestDashjobLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-create-harvest-job
    DependsOn: []
  ListDashoriginDashendpointsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-list-origin-endpoints
    DependsOn: []
  StripeDashapiDashmapLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-api-map
    DependsOn: []
  StripeDashcreateDashpaymentDashintentLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-payment-intent
    DependsOn: []
  StripeDashcreateDashcustomerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-customer
    DependsOn: []
  StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: >-
        /aws/lambda/branchdna-api-prod-stripe-update-customer-default-payment-method
    DependsOn: []
  StripeDashattachDashpaymentDashmethodLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-attach-payment-method
    DependsOn: []
  StripeDashdetachDashpaymentDashmethodLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-detach-payment-method
    DependsOn: []
  StripeDashupdateDashpaymentDashmethodLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-update-payment-method
    DependsOn: []
  StripeDashcreateDashpriceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-price
    DependsOn: []
  StripeDashcreateDashreoccuringDashpriceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-reoccuring-price
    DependsOn: []
  StripeDashcreateDashproductLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-product
    DependsOn: []
  StripeDashretrieveDashproductLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-retrieve-product
    DependsOn: []
  StripeDashlistDashproductsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-list-products
    DependsOn: []
  StripeDashupdateDashproductLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-update-product
    DependsOn: []
  StripeDashcreateDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-subscription
    DependsOn: []
  StripeDashupdateDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-update-subscription
    DependsOn: []
  StripeDashcancelDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-cancel-subscription
    DependsOn: []
  StripeDashcancelDashsubscriptionDasheopLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-cancel-subscription-eop
    DependsOn: []
  StripeDashpauseDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-pause-subscription
    DependsOn: []
  StripeDashresumeDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-resume-subscription
    DependsOn: []
  StripeDashretrieveDashsubscriptionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-retrieve-subscription
    DependsOn: []
  StripeDashcreateDashcustomerDashportalDashsessionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-stripe-create-customer-portal-session
    DependsOn: []
  IngestDashvodDashmerchandiseLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-ingest-vod-merchandise
    DependsOn: []
  DeleteDashallDashvodDashmerchandiseLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-delete-all-vod-merchandise
    DependsOn: []
  DeleteDashvodDashmerchandiseDashbyDashidLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-delete-vod-merchandise-by-id
    DependsOn: []
  DailyDashactivityDashcronLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-daily-activity-cron
    DependsOn: []
  MonthlyDashactivityDashcronLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-monthly-activity-cron
    DependsOn: []
  SendDashmailDashcronLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/lambda/branchdna-api-prod-send-mail-cron
    DependsOn: []
  IamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join
            - "-"
            - - branchdna-api
              - prod
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                Resource:
                  - !Sub
                    - >-
                      arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/branchdna-api-prod*:*
                    - {}
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub
                    - >-
                      arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/branchdna-api-prod*:*:*
                    - {}
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "sns:SetSMSAttributes"
                  - "sns:Publish"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminGetUser"
                  - "cognito-idp:ListUsers"
                Resource: "*"
      Path: /
      RoleName: !Join
        - "-"
        - - branchdna-api
          - prod
          - !Ref "AWS::Region"
          - lambdaRole
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    DependsOn: []
  CreateLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/create.zip
      Handler: lambdas/notes/create.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-create
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - CreateLogGroup
  GetLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/get.zip
      Handler: lambdas/notes/get.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-get
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - GetLogGroup
  ListLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list.zip
      Handler: lambdas/notes/list.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListLogGroup
  UpdateLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/update.zip
      Handler: lambdas/notes/update.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-update
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - UpdateLogGroup
  DeleteLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/delete.zip
      Handler: lambdas/notes/delete.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-delete
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DeleteLogGroup
  PurchasesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/purchases.zip
      Handler: lambdas/purchases/list.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-purchases
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - PurchasesLogGroup
  BillingLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/billing.zip
      Handler: lambdas/purchases/billing.main
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-billing
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - BillingLogGroup
  SendSMSLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/sendSMS.zip
      Handler: lambdas/endpoints/sendSMS.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-sendSMS
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - SendSMSLogGroup
  DeviceActivateLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/deviceActivate.zip
      Handler: lambdas/tvapps/deviceActivate.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-deviceActivate
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DeviceActivateLogGroup
  StripeSuccessfulCheckoutWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripeSuccessfulCheckoutWebhook.zip
      Handler: lambdas/webhooks/stripeSuccessfulCheckout.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripeSuccessfulCheckoutWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeSuccessfulCheckoutWebhookLogGroup
  StripeHandleSubscriptionsWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripeHandleSubscriptionsWebhook.zip
      Handler: lambdas/webhooks/stripeHandleSubscriptions.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripeHandleSubscriptionsWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeHandleSubscriptionsWebhookLogGroup
  StripeHandleInvoiceWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripeHandleInvoiceWebhook.zip
      Handler: lambdas/webhooks/stripeHandleInvoice.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripeHandleInvoiceWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeHandleInvoiceWebhookLogGroup
  StripeEverythingWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripeEverythingWebhook.zip
      Handler: lambdas/webhooks/stripeEverything.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripeEverythingWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeEverythingWebhookLogGroup
  StripePaymentIntentSuccessWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripePaymentIntentSuccessWebhook.zip
      Handler: lambdas/webhooks/stripePaymentIntentSuccess.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripePaymentIntentSuccessWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripePaymentIntentSuccessWebhookLogGroup
  StripeChargeSuccessWebhookLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripeChargeSuccessWebhook.zip
      Handler: lambdas/webhooks/stripeChargeSuccess.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripeChargeSuccessWebhook
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeChargeSuccessWebhookLogGroup
  FetchUserMetaByEmailLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/fetchUserMetaByEmail.zip
      Handler: lambdas/endpoints/users/getUserMetaData.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-fetchUserMetaByEmail
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - FetchUserMetaByEmailLogGroup
  FetchAllPurchaseablesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/fetchAllPurchaseables.zip
      Handler: lambdas/endpoints/purchaseables/getAllPurchaseables.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-fetchAllPurchaseables
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - FetchAllPurchaseablesLogGroup
  PlayerDashanalyticsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/player-analytics.zip
      Handler: lambdas/analytics/playerAnalytics.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-player-analytics
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - PlayerDashanalyticsLogGroup
  CreateDashchannelDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/create-channel-media-live.zip
      Handler: lambdas/medialive/createChannelMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-create-channel-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - CreateDashchannelDashmediaDashliveLogGroup
  CreateDashchannelDashmediaDashpackageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/create-channel-media-package.zip
      Handler: lambdas/medialive/createChannelMediaPackage.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-create-channel-media-package
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - CreateDashchannelDashmediaDashpackageLogGroup
  CreateDashoriginDashendpointDashmediaDashpackageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/create-origin-endpoint-media-package.zip
      Handler: lambdas/medialive/createOriginEndpointMediaPackage.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-create-origin-endpoint-media-package
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - CreateDashoriginDashendpointDashmediaDashpackageLogGroup
  ListDashchannelsDashmediaDashpackageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-channels-media-package.zip
      Handler: lambdas/medialive/listChannelsMediaPackage.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-channels-media-package
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashchannelsDashmediaDashpackageLogGroup
  ListDashchannelsDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-channels-media-live.zip
      Handler: lambdas/medialive/listChannelsMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-channels-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashchannelsDashmediaDashliveLogGroup
  ListDashinputDashdevicesDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-input-devices-media-live.zip
      Handler: lambdas/medialive/listInputDevicesMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-input-devices-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashinputDashdevicesDashmediaDashliveLogGroup
  ListDashinputsDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-inputs-media-live.zip
      Handler: lambdas/medialive/listInputsMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-inputs-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashinputsDashmediaDashliveLogGroup
  DescribeDashchannelDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/describe-channel-media-live.zip
      Handler: lambdas/medialive/describeChannelMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-describe-channel-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DescribeDashchannelDashmediaDashliveLogGroup
  StopDashchannelDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stop-channel-media-live.zip
      Handler: lambdas/medialive/stopChannelMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stop-channel-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StopDashchannelDashmediaDashliveLogGroup
  StartDashchannelDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/start-channel-media-live.zip
      Handler: lambdas/medialive/startChannelMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-start-channel-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StartDashchannelDashmediaDashliveLogGroup
  DeleteDashchannelDashmediaDashliveLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/delete-channel-media-live.zip
      Handler: lambdas/medialive/deleteChannelMediaLive.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-delete-channel-media-live
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DeleteDashchannelDashmediaDashliveLogGroup
  DescribeDashharvestDashjobLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/describe-harvest-job.zip
      Handler: lambdas/medialive/describeHarvestJob.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-describe-harvest-job
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DescribeDashharvestDashjobLogGroup
  ListDashharvestDashjobsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-harvest-jobs.zip
      Handler: lambdas/medialive/listHarvestJobs.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-harvest-jobs
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashharvestDashjobsLogGroup
  CreateDashharvestDashjobLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/create-harvest-job.zip
      Handler: lambdas/medialive/createHarvestJob.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-create-harvest-job
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - CreateDashharvestDashjobLogGroup
  ListDashoriginDashendpointsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/list-origin-endpoints.zip
      Handler: lambdas/medialive/listOriginEndpoints.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-list-origin-endpoints
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - ListDashoriginDashendpointsLogGroup
  StripeDashapiDashmapLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-api-map.zip
      Handler: lambdas/endpoints/stripe/apiMap.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-api-map
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashapiDashmapLogGroup
  StripeDashcreateDashpaymentDashintentLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-payment-intent.zip
      Handler: lambdas/endpoints/stripe/createPaymentIntent.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-payment-intent
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashpaymentDashintentLogGroup
  StripeDashcreateDashcustomerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-customer.zip
      Handler: lambdas/endpoints/stripe/createCustomer.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-customer
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashcustomerLogGroup
  StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-update-customer-default-payment-method.zip
      Handler: lambdas/endpoints/stripe/updateCustomerDefaultPaymentMethod.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-update-customer-default-payment-method
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLogGroup
  StripeDashattachDashpaymentDashmethodLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-attach-payment-method.zip
      Handler: lambdas/endpoints/stripe/attachPaymentMethod.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-attach-payment-method
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashattachDashpaymentDashmethodLogGroup
  StripeDashdetachDashpaymentDashmethodLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-detach-payment-method.zip
      Handler: lambdas/endpoints/stripe/detachPaymentMethod.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-detach-payment-method
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashdetachDashpaymentDashmethodLogGroup
  StripeDashupdateDashpaymentDashmethodLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-update-payment-method.zip
      Handler: lambdas/endpoints/stripe/updatePaymentMethod.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-update-payment-method
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashupdateDashpaymentDashmethodLogGroup
  StripeDashcreateDashpriceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-price.zip
      Handler: lambdas/endpoints/stripe/createPrice.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-price
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashpriceLogGroup
  StripeDashcreateDashreoccuringDashpriceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-reoccuring-price.zip
      Handler: lambdas/endpoints/stripe/createReoccuringPrice.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-reoccuring-price
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashreoccuringDashpriceLogGroup
  StripeDashcreateDashproductLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-product.zip
      Handler: lambdas/endpoints/stripe/createProduct.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-product
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashproductLogGroup
  StripeDashretrieveDashproductLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-retrieve-product.zip
      Handler: lambdas/endpoints/stripe/retrieveProduct.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-retrieve-product
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashretrieveDashproductLogGroup
  StripeDashlistDashproductsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-list-products.zip
      Handler: lambdas/endpoints/stripe/listProducts.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-list-products
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashlistDashproductsLogGroup
  StripeDashupdateDashproductLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-update-product.zip
      Handler: lambdas/endpoints/stripe/updateProduct.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-update-product
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashupdateDashproductLogGroup
  StripeDashcreateDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-subscription.zip
      Handler: lambdas/endpoints/stripe/createSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashsubscriptionLogGroup
  StripeDashupdateDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-update-subscription.zip
      Handler: lambdas/endpoints/stripe/updateSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-update-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashupdateDashsubscriptionLogGroup
  StripeDashcancelDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-cancel-subscription.zip
      Handler: lambdas/endpoints/stripe/cancelSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-cancel-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcancelDashsubscriptionLogGroup
  StripeDashcancelDashsubscriptionDasheopLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-cancel-subscription-eop.zip
      Handler: lambdas/endpoints/stripe/cancelSubscriptionEOP.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-cancel-subscription-eop
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcancelDashsubscriptionDasheopLogGroup
  StripeDashpauseDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-pause-subscription.zip
      Handler: lambdas/endpoints/stripe/pauseSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-pause-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashpauseDashsubscriptionLogGroup
  StripeDashresumeDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-resume-subscription.zip
      Handler: lambdas/endpoints/stripe/resumeSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-resume-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashresumeDashsubscriptionLogGroup
  StripeDashretrieveDashsubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-retrieve-subscription.zip
      Handler: lambdas/endpoints/stripe/retrieveSubscription.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-retrieve-subscription
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashretrieveDashsubscriptionLogGroup
  StripeDashcreateDashcustomerDashportalDashsessionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/stripe-create-customer-portal-session.zip
      Handler: lambdas/endpoints/stripe/createCustomerPortalSession.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-stripe-create-customer-portal-session
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - StripeDashcreateDashcustomerDashportalDashsessionLogGroup
  IngestDashvodDashmerchandiseLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/ingest-vod-merchandise.zip
      Handler: lambdas/endpoints/graphql/ingestVODmerchandise.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-ingest-vod-merchandise
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - IngestDashvodDashmerchandiseLogGroup
  DeleteDashallDashvodDashmerchandiseLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/delete-all-vod-merchandise.zip
      Handler: lambdas/endpoints/graphql/deleteAllVODmerchandise.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-delete-all-vod-merchandise
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DeleteDashallDashvodDashmerchandiseLogGroup
  DeleteDashvodDashmerchandiseDashbyDashidLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/delete-vod-merchandise-by-id.zip
      Handler: lambdas/endpoints/graphql/deleteVODmerchandiseById.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-delete-vod-merchandise-by-id
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DeleteDashvodDashmerchandiseDashbyDashidLogGroup
  DailyDashactivityDashcronLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/daily-activity-cron.zip
      Handler: lambdas/crons/dailyActivityCron.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-daily-activity-cron
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - DailyDashactivityDashcronLogGroup
  MonthlyDashactivityDashcronLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/monthly-activity-cron.zip
      Handler: lambdas/crons/monthlyActivityCron.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-monthly-activity-cron
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - MonthlyDashactivityDashcronLogGroup
  SendDashmailDashcronLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z/send-mail-cron.zip
      Handler: lambdas/crons/sendMailCron.handler
      Runtime: nodejs12.x
      FunctionName: branchdna-api-prod-send-mail-cron
      MemorySize: 1024
      Timeout: 6
      Environment:
        Variables:
          tableName: prod
          stripeSecretKey: >-
            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
          SERVICE_NAME: Couchtourtv
          DEPLOY_STAGE: prod
          CODE_AWS_REGION: us-east-1
          APIGATEWAY_APIVERSION: 2018-11-29
          WS_ENDPOINT: "wss://y6zrilchm9.execute-api.us-east-1.amazonaws.com/prod"
          SNS_APIVERSION: 2010-03-31
          DYNAMODB_APIVERSION: 2012-08-10
          DYNAMODB_ENDPOINT: "https://dynamodb.us-east-1.amazonaws.com"
          ACQUISITIONS_TABLE: ct-Acquistions
          CREDIT_CARD_TABLE: ct-CreditCards
          DEVICES_TABLES: ct-Devices
          EVENTS_TABLE: ct-Events
          MAESTRO_EVENTS: ct-maestroEvents
          MAESTRO_SALES: ct-maestroSales
          MEDIA_META_TABLE: ct-MediaMeta
          MOVIES_TABLE: ct-movies
          NEW_PURCHASES_TABLE: ct-NewPurchases
          NOTES_TABLE: ct-Notes
          PURCHASES_TABLE: ct-purchases
          REQUEST_RESPONSES: ct-request-responses
          SNS_MESSAGES_TABLE: ct-snsmessages
          SOCKETS_TABLE: ct-Sockets
          STRIPE_WEBHOOK_SUCCESS_CHECKOUT: ct-StripeSuccessCheckout
          TICKETS_TABLE: ct-Tickets
          TRANSACTIONS_TABLE: ct-Transactions
          USER_TABLE: ct-Users
          USER_POOL_ID: >-
            arn:aws:cognito-idp:us-east-1:570573558182:userpool/us-east-1_p2G5CMWjO
          COGNITO_REGION: us-east-1
          STRIPE_SECRET_KEY: >-
            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
          STRIPE_CURRENCY: USD
          STRIPE_INTENT_DESCRIPTION: www.couchtour.tv-intent
          STRIPE_CUSTOMER_DESCRIPTION: www.couchtour.tv-customer
          STRIPE_REOCCURING_PAYMENT: month
          APPSYNC_API_KEY: da2-z7sdgzwglvdq3n5bcesgrgvw2u
          STRIPE_SECRET_KEY_DECIBEL: >-
            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
          STRIPE_SECRET_KEY_WHITELABEL: >-
            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
          STRIPE_SECRET_KEY_COUCHTOURTV: >-
            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
          PLAYER_ANALYTICS_TABLE: ct-player-analytics
          MEDIALIVE_APIVERSION: 2017-10-14
          MEDIAPACKAGE_APIVERSION: 2017-10-12
          AWS_ACCESS_KEY_ID_API: AKIAYJWGVSGTKBBBRA7X
          AWS_SECRET_ACCESS_KEY_API: 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
          MEDIA_LIVE_ARN: "arn:aws:medialive:us-east-1:570573558182:channel:1400131"
          MEDIA_LIVE_ACCESS_ROLE_ARN: "arn:aws:iam::570573558182:role/MediaLiveAccessRole"
          AWS_APPSYNC_GRAPHQLENDPOINT: >-
            https://btcjchbklzghbbpatcw4ivq3dq.appsync-api.us-east-1.amazonaws.com/graphql
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AppSecurityGroupParameter
        SubnetIds:
          - !Ref AppSubnet1Parameter
          - !Ref AppSubnet2Parameter
    DependsOn:
      - SendDashmailDashcronLogGroup
  DailyDashactivityDashcronEventsRuleSchedule1:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: cron(0 18 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - DailyDashactivityDashcronLambdaFunction
            - Arn
          Id: daily-activity-cronSchedule
    DependsOn: []
  DailyDashactivityDashcronLambdaPermissionEventsRuleSchedule1:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DailyDashactivityDashcronLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - DailyDashactivityDashcronEventsRuleSchedule1
        - Arn
    DependsOn: []
  MonthlyDashactivityDashcronEventsRuleSchedule1:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: cron(10 18 1 * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - MonthlyDashactivityDashcronLambdaFunction
            - Arn
          Id: monthly-activity-cronSchedule
    DependsOn: []
  MonthlyDashactivityDashcronLambdaPermissionEventsRuleSchedule1:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - MonthlyDashactivityDashcronLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - MonthlyDashactivityDashcronEventsRuleSchedule1
        - Arn
    DependsOn: []
  SendDashmailDashcronEventsRuleSchedule1:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: cron(20 18 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - SendDashmailDashcronLambdaFunction
            - Arn
          Id: send-mail-cronSchedule
    DependsOn: []
  SendDashmailDashcronLambdaPermissionEventsRuleSchedule1:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - SendDashmailDashcronLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - SendDashmailDashcronEventsRuleSchedule1
        - Arn
    DependsOn: []
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: prod-branchdna-api
      EndpointConfiguration:
        Types:
          - EDGE
      Policy: ""
    DependsOn: []
  ApiGatewayResourceNotes:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: notes
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceNotesIdVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceNotes
      PathPart: "{id}"
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourcePurchases:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: purchases
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceBilling:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: billing
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceSendDashsms:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: send-sms
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceDeviceDashactivate:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: device-activate
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceConfirmDashstripeDashcheckout:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: confirm-stripe-checkout
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceHandleDashstripeDashsubscriptions:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: handle-stripe-subscriptions
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceHandleDashstripeDashinvoice:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: handle-stripe-invoice
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceEverything:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: everything
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourcePaymentDashintentDashsuccess:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: payment-intent-success
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceChargeDashsuccess:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: charge-success
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceUserDashmeta:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: user-meta
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceAllDashpurchaseables:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: all-purchaseables
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApi:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApi
      PathPart: v1
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1PlayerDashanalytics:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: player-analytics
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1CreateDashchannelDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: create-channel-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1CreateDashchannelDashmediaDashpackage:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: create-channel-media-package
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1CreateDashoriginDashendpointDashmediaDashpackage:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: create-origin-endpoint-media-package
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashchannelsDashmediaDashpackage:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-channels-media-package
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashchannelsDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-channels-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashinputDashdevicesDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-input-devices-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashinputsDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-inputs-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1DescribeDashchannelDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: describe-channel-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1DescribeDashchannelDashmediaDashliveChannelidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1DescribeDashchannelDashmediaDashlive
      PathPart: "{channelId}"
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StopDashchannelDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stop-channel-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StartDashchannelDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: start-channel-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1DeleteDashchannelDashmediaDashlive:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: delete-channel-media-live
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1DescribeDashharvestDashjob:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: describe-harvest-job
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1DescribeDashharvestDashjobJobidVar:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1DescribeDashharvestDashjob
      PathPart: "{jobId}"
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashharvestDashjobs:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-harvest-jobs
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1CreateDashharvestDashjob:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: create-harvest-job
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1ListDashoriginDashendpoints:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: list-origin-endpoints
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashapiDashmap:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-api-map
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashpaymentDashintent:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-payment-intent
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashcustomer:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-customer
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethod:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-update-customer-default-payment-method
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashattachDashpaymentDashmethod:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-attach-payment-method
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashdetachDashpaymentDashmethod:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-detach-payment-method
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashupdateDashpaymentDashmethod:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-update-payment-method
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashprice:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-price
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashreoccuringDashprice:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-reoccuring-price
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashproduct:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-product
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashretrieveDashproduct:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-retrieve-product
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashlistDashproducts:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-list-products
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashupdateDashproduct:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-update-product
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashupdateDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-update-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcancelDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-cancel-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcancelDashsubscriptionDasheop:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-cancel-subscription-eop
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashpauseDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-pause-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashresumeDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-resume-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashretrieveDashsubscription:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-retrieve-subscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1StripeDashcreateDashcustomerDashportalDashsession:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: stripe-create-customer-portal-session
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1VodDashmerchandiseDashingest:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: vod-merchandise-ingest
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashall:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: vod-merchandise-delete-all
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashbyDashid:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceApiV1
      PathPart: vod-merchandise-delete-by-id
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1PlayerDashanalyticsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1PlayerDashanalytics
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1CreateDashchannelDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1CreateDashchannelDashmediaDashpackageOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashchannelDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1CreateDashoriginDashendpointDashmediaDashpackageOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashoriginDashendpointDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashchannelsDashmediaDashpackageOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashchannelsDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashchannelsDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashchannelsDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashinputDashdevicesDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashinputDashdevicesDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashinputsDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashinputsDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1DescribeDashchannelDashmediaDashliveChannelidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1DescribeDashchannelDashmediaDashliveChannelidVar
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StopDashchannelDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StopDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StartDashchannelDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StartDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1DeleteDashchannelDashmediaDashliveOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1DeleteDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1DescribeDashharvestDashjobJobidVarOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1DescribeDashharvestDashjobJobidVar
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashharvestDashjobsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashharvestDashjobs
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1CreateDashharvestDashjobOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashharvestDashjob
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1ListDashoriginDashendpointsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashoriginDashendpoints
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashapiDashmapOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashapiDashmap
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashpaymentDashintentOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashpaymentDashintent
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashcustomerOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashcustomer
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref >-
        ApiGatewayResourceApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashattachDashpaymentDashmethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashattachDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashdetachDashpaymentDashmethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashdetachDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashupdateDashpaymentDashmethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashpriceOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashprice
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashreoccuringDashpriceOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashreoccuringDashprice
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashproductOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashproduct
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashretrieveDashproductOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashretrieveDashproduct
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashlistDashproductsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashlistDashproducts
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashupdateDashproductOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashproduct
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashupdateDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcancelDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionDasheopOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcancelDashsubscriptionDasheop
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashpauseDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashpauseDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashresumeDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashresumeDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashretrieveDashsubscriptionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashretrieveDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1StripeDashcreateDashcustomerDashportalDashsessionOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashcustomerDashportalDashsession
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1VodDashmerchandiseDashingestOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashingest
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashallOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashall
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashbyDashidOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Accept,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashbyDashid
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  ApiGatewayMethodNotesPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotes
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CreateLambdaPermissionApiGateway
  ApiGatewayMethodNotesIdVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotesIdVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - GetLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - GetLambdaPermissionApiGateway
  ApiGatewayMethodNotesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotes
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListLambdaPermissionApiGateway
  ApiGatewayMethodNotesIdVarPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotesIdVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - UpdateLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - UpdateLambdaPermissionApiGateway
  ApiGatewayMethodNotesIdVarDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceNotesIdVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DeleteLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DeleteLambdaPermissionApiGateway
  ApiGatewayMethodPurchasesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourcePurchases
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - PurchasesLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - PurchasesLambdaPermissionApiGateway
  ApiGatewayMethodBillingPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceBilling
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - BillingLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - BillingLambdaPermissionApiGateway
  ApiGatewayMethodSendDashsmsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceSendDashsms
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - SendSMSLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - SendSMSLambdaPermissionApiGateway
  ApiGatewayMethodDeviceDashactivatePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceDeviceDashactivate
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DeviceActivateLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DeviceActivateLambdaPermissionApiGateway
  ApiGatewayMethodConfirmDashstripeDashcheckoutPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceConfirmDashstripeDashcheckout
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeSuccessfulCheckoutWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeSuccessfulCheckoutWebhookLambdaPermissionApiGateway
  ApiGatewayMethodHandleDashstripeDashsubscriptionsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceHandleDashstripeDashsubscriptions
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeHandleSubscriptionsWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeHandleSubscriptionsWebhookLambdaPermissionApiGateway
  ApiGatewayMethodHandleDashstripeDashinvoicePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceHandleDashstripeDashinvoice
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeHandleInvoiceWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeHandleInvoiceWebhookLambdaPermissionApiGateway
  ApiGatewayMethodEverythingPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceEverything
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeEverythingWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeEverythingWebhookLambdaPermissionApiGateway
  ApiGatewayMethodPaymentDashintentDashsuccessPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourcePaymentDashintentDashsuccess
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripePaymentIntentSuccessWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripePaymentIntentSuccessWebhookLambdaPermissionApiGateway
  ApiGatewayMethodChargeDashsuccessPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceChargeDashsuccess
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeChargeSuccessWebhookLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeChargeSuccessWebhookLambdaPermissionApiGateway
  ApiGatewayMethodUserDashmetaPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceUserDashmeta
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - FetchUserMetaByEmailLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - FetchUserMetaByEmailLambdaPermissionApiGateway
  ApiGatewayMethodAllDashpurchaseablesGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceAllDashpurchaseables
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - FetchAllPurchaseablesLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - FetchAllPurchaseablesLambdaPermissionApiGateway
  ApiGatewayMethodApiV1PlayerDashanalyticsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1PlayerDashanalytics
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - PlayerDashanalyticsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - PlayerDashanalyticsLambdaPermissionApiGateway
  ApiGatewayMethodApiV1CreateDashchannelDashmediaDashlivePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateDashchannelDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CreateDashchannelDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1CreateDashchannelDashmediaDashpackagePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashchannelDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateDashchannelDashmediaDashpackageLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CreateDashchannelDashmediaDashpackageLambdaPermissionApiGateway
  ApiGatewayMethodApiV1CreateDashoriginDashendpointDashmediaDashpackagePost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashoriginDashendpointDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateDashoriginDashendpointDashmediaDashpackageLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - >-
        CreateDashoriginDashendpointDashmediaDashpackageLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashchannelsDashmediaDashpackageGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashchannelsDashmediaDashpackage
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashchannelsDashmediaDashpackageLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashchannelsDashmediaDashpackageLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashchannelsDashmediaDashliveGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashchannelsDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashchannelsDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashchannelsDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashinputDashdevicesDashmediaDashliveGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashinputDashdevicesDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashinputDashdevicesDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashinputDashdevicesDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashinputsDashmediaDashliveGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashinputsDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashinputsDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashinputsDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1DescribeDashchannelDashmediaDashliveChannelidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1DescribeDashchannelDashmediaDashliveChannelidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DescribeDashchannelDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DescribeDashchannelDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StopDashchannelDashmediaDashlivePut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StopDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StopDashchannelDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StopDashchannelDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StartDashchannelDashmediaDashlivePut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StartDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StartDashchannelDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StartDashchannelDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1DeleteDashchannelDashmediaDashlivePut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1DeleteDashchannelDashmediaDashlive
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DeleteDashchannelDashmediaDashliveLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DeleteDashchannelDashmediaDashliveLambdaPermissionApiGateway
  ApiGatewayMethodApiV1DescribeDashharvestDashjobJobidVarGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1DescribeDashharvestDashjobJobidVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DescribeDashharvestDashjobLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DescribeDashharvestDashjobLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashharvestDashjobsGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashharvestDashjobs
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashharvestDashjobsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashharvestDashjobsLambdaPermissionApiGateway
  ApiGatewayMethodApiV1CreateDashharvestDashjobPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1CreateDashharvestDashjob
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - CreateDashharvestDashjobLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - CreateDashharvestDashjobLambdaPermissionApiGateway
  ApiGatewayMethodApiV1ListDashoriginDashendpointsGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1ListDashoriginDashendpoints
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - ListDashoriginDashendpointsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - ListDashoriginDashendpointsLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashapiDashmapAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashapiDashmap
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashapiDashmapLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashapiDashmapLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashpaymentDashintentAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashpaymentDashintent
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashpaymentDashintentLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashpaymentDashintentLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashcustomerAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashcustomer
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashcustomerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashcustomerLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref >-
        ApiGatewayResourceApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - >-
                StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - >-
        StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashattachDashpaymentDashmethodAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashattachDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashattachDashpaymentDashmethodLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashattachDashpaymentDashmethodLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashdetachDashpaymentDashmethodAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashdetachDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashdetachDashpaymentDashmethodLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashdetachDashpaymentDashmethodLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashupdateDashpaymentDashmethodAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashpaymentDashmethod
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashupdateDashpaymentDashmethodLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashupdateDashpaymentDashmethodLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashpriceAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashprice
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashpriceLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashpriceLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashreoccuringDashpriceAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashreoccuringDashprice
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashreoccuringDashpriceLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashreoccuringDashpriceLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashproductAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashproduct
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashproductLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashproductLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashretrieveDashproductAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashretrieveDashproduct
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashretrieveDashproductLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashretrieveDashproductLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashlistDashproductsAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashlistDashproducts
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashlistDashproductsLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashlistDashproductsLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashupdateDashproductAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashproduct
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashupdateDashproductLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashupdateDashproductLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcreateDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashupdateDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashupdateDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashupdateDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashupdateDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcancelDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcancelDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcancelDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionDasheopAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcancelDashsubscriptionDasheop
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcancelDashsubscriptionDasheopLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashcancelDashsubscriptionDasheopLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashpauseDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashpauseDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashpauseDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashpauseDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashresumeDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashresumeDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashresumeDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashresumeDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashretrieveDashsubscriptionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashretrieveDashsubscription
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashretrieveDashsubscriptionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - StripeDashretrieveDashsubscriptionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1StripeDashcreateDashcustomerDashportalDashsessionAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1StripeDashcreateDashcustomerDashportalDashsession
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - StripeDashcreateDashcustomerDashportalDashsessionLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - >-
        StripeDashcreateDashcustomerDashportalDashsessionLambdaPermissionApiGateway
  ApiGatewayMethodApiV1VodDashmerchandiseDashingestAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashingest
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - IngestDashvodDashmerchandiseLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - IngestDashvodDashmerchandiseLambdaPermissionApiGateway
  ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashallAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashall
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DeleteDashallDashvodDashmerchandiseLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DeleteDashallDashvodDashmerchandiseLambdaPermissionApiGateway
  ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashbyDashidAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceApiV1VodDashmerchandiseDashdeleteDashbyDashid
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt
              - DeleteDashvodDashmerchandiseDashbyDashidLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
    DependsOn:
      - DeleteDashvodDashmerchandiseDashbyDashidLambdaPermissionApiGateway
  ApiGatewayDeployment1668906998863:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
    DependsOn:
      - ApiGatewayMethodApiV1PlayerDashanalyticsOptions
      - ApiGatewayMethodApiV1CreateDashchannelDashmediaDashliveOptions
      - ApiGatewayMethodApiV1CreateDashchannelDashmediaDashpackageOptions
      - >-
        ApiGatewayMethodApiV1CreateDashoriginDashendpointDashmediaDashpackageOptions
      - ApiGatewayMethodApiV1ListDashchannelsDashmediaDashpackageOptions
      - ApiGatewayMethodApiV1ListDashchannelsDashmediaDashliveOptions
      - ApiGatewayMethodApiV1ListDashinputDashdevicesDashmediaDashliveOptions
      - ApiGatewayMethodApiV1ListDashinputsDashmediaDashliveOptions
      - >-
        ApiGatewayMethodApiV1DescribeDashchannelDashmediaDashliveChannelidVarOptions
      - ApiGatewayMethodApiV1StopDashchannelDashmediaDashliveOptions
      - ApiGatewayMethodApiV1StartDashchannelDashmediaDashliveOptions
      - ApiGatewayMethodApiV1DeleteDashchannelDashmediaDashliveOptions
      - ApiGatewayMethodApiV1DescribeDashharvestDashjobJobidVarOptions
      - ApiGatewayMethodApiV1ListDashharvestDashjobsOptions
      - ApiGatewayMethodApiV1CreateDashharvestDashjobOptions
      - ApiGatewayMethodApiV1ListDashoriginDashendpointsOptions
      - ApiGatewayMethodApiV1StripeDashapiDashmapOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashpaymentDashintentOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashcustomerOptions
      - >-
        ApiGatewayMethodApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodOptions
      - ApiGatewayMethodApiV1StripeDashattachDashpaymentDashmethodOptions
      - ApiGatewayMethodApiV1StripeDashdetachDashpaymentDashmethodOptions
      - ApiGatewayMethodApiV1StripeDashupdateDashpaymentDashmethodOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashpriceOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashreoccuringDashpriceOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashproductOptions
      - ApiGatewayMethodApiV1StripeDashretrieveDashproductOptions
      - ApiGatewayMethodApiV1StripeDashlistDashproductsOptions
      - ApiGatewayMethodApiV1StripeDashupdateDashproductOptions
      - ApiGatewayMethodApiV1StripeDashcreateDashsubscriptionOptions
      - ApiGatewayMethodApiV1StripeDashupdateDashsubscriptionOptions
      - ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionOptions
      - ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionDasheopOptions
      - ApiGatewayMethodApiV1StripeDashpauseDashsubscriptionOptions
      - ApiGatewayMethodApiV1StripeDashresumeDashsubscriptionOptions
      - ApiGatewayMethodApiV1StripeDashretrieveDashsubscriptionOptions
      - >-
        ApiGatewayMethodApiV1StripeDashcreateDashcustomerDashportalDashsessionOptions
      - ApiGatewayMethodApiV1VodDashmerchandiseDashingestOptions
      - ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashallOptions
      - ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashbyDashidOptions
      - ApiGatewayMethodNotesPost
      - ApiGatewayMethodNotesIdVarGet
      - ApiGatewayMethodNotesGet
      - ApiGatewayMethodNotesIdVarPut
      - ApiGatewayMethodNotesIdVarDelete
      - ApiGatewayMethodPurchasesGet
      - ApiGatewayMethodBillingPost
      - ApiGatewayMethodSendDashsmsPost
      - ApiGatewayMethodDeviceDashactivatePost
      - ApiGatewayMethodConfirmDashstripeDashcheckoutPost
      - ApiGatewayMethodHandleDashstripeDashsubscriptionsPost
      - ApiGatewayMethodHandleDashstripeDashinvoicePost
      - ApiGatewayMethodEverythingPost
      - ApiGatewayMethodPaymentDashintentDashsuccessPost
      - ApiGatewayMethodChargeDashsuccessPost
      - ApiGatewayMethodUserDashmetaPost
      - ApiGatewayMethodAllDashpurchaseablesGet
      - ApiGatewayMethodApiV1PlayerDashanalyticsPost
      - ApiGatewayMethodApiV1CreateDashchannelDashmediaDashlivePost
      - ApiGatewayMethodApiV1CreateDashchannelDashmediaDashpackagePost
      - >-
        ApiGatewayMethodApiV1CreateDashoriginDashendpointDashmediaDashpackagePost
      - ApiGatewayMethodApiV1ListDashchannelsDashmediaDashpackageGet
      - ApiGatewayMethodApiV1ListDashchannelsDashmediaDashliveGet
      - ApiGatewayMethodApiV1ListDashinputDashdevicesDashmediaDashliveGet
      - ApiGatewayMethodApiV1ListDashinputsDashmediaDashliveGet
      - ApiGatewayMethodApiV1DescribeDashchannelDashmediaDashliveChannelidVarGet
      - ApiGatewayMethodApiV1StopDashchannelDashmediaDashlivePut
      - ApiGatewayMethodApiV1StartDashchannelDashmediaDashlivePut
      - ApiGatewayMethodApiV1DeleteDashchannelDashmediaDashlivePut
      - ApiGatewayMethodApiV1DescribeDashharvestDashjobJobidVarGet
      - ApiGatewayMethodApiV1ListDashharvestDashjobsGet
      - ApiGatewayMethodApiV1CreateDashharvestDashjobPost
      - ApiGatewayMethodApiV1ListDashoriginDashendpointsGet
      - ApiGatewayMethodApiV1StripeDashapiDashmapAny
      - ApiGatewayMethodApiV1StripeDashcreateDashpaymentDashintentAny
      - ApiGatewayMethodApiV1StripeDashcreateDashcustomerAny
      - >-
        ApiGatewayMethodApiV1StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodAny
      - ApiGatewayMethodApiV1StripeDashattachDashpaymentDashmethodAny
      - ApiGatewayMethodApiV1StripeDashdetachDashpaymentDashmethodAny
      - ApiGatewayMethodApiV1StripeDashupdateDashpaymentDashmethodAny
      - ApiGatewayMethodApiV1StripeDashcreateDashpriceAny
      - ApiGatewayMethodApiV1StripeDashcreateDashreoccuringDashpriceAny
      - ApiGatewayMethodApiV1StripeDashcreateDashproductAny
      - ApiGatewayMethodApiV1StripeDashretrieveDashproductAny
      - ApiGatewayMethodApiV1StripeDashlistDashproductsAny
      - ApiGatewayMethodApiV1StripeDashupdateDashproductAny
      - ApiGatewayMethodApiV1StripeDashcreateDashsubscriptionAny
      - ApiGatewayMethodApiV1StripeDashupdateDashsubscriptionAny
      - ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionAny
      - ApiGatewayMethodApiV1StripeDashcancelDashsubscriptionDasheopAny
      - ApiGatewayMethodApiV1StripeDashpauseDashsubscriptionAny
      - ApiGatewayMethodApiV1StripeDashresumeDashsubscriptionAny
      - ApiGatewayMethodApiV1StripeDashretrieveDashsubscriptionAny
      - >-
        ApiGatewayMethodApiV1StripeDashcreateDashcustomerDashportalDashsessionAny
      - ApiGatewayMethodApiV1VodDashmerchandiseDashingestAny
      - ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashallAny
      - ApiGatewayMethodApiV1VodDashmerchandiseDashdeleteDashbyDashidAny
      - 20NestedStack
  CreateLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  GetLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - GetLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  UpdateLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - UpdateLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DeleteLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DeleteLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  PurchasesLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - PurchasesLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  BillingLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - BillingLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  SendSMSLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - SendSMSLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DeviceActivateLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DeviceActivateLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeSuccessfulCheckoutWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeSuccessfulCheckoutWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeHandleSubscriptionsWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeHandleSubscriptionsWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeHandleInvoiceWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeHandleInvoiceWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeEverythingWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeEverythingWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripePaymentIntentSuccessWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripePaymentIntentSuccessWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeChargeSuccessWebhookLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeChargeSuccessWebhookLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  FetchUserMetaByEmailLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - FetchUserMetaByEmailLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  FetchAllPurchaseablesLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - FetchAllPurchaseablesLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  PlayerDashanalyticsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - PlayerDashanalyticsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  CreateDashchannelDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateDashchannelDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  CreateDashchannelDashmediaDashpackageLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateDashchannelDashmediaDashpackageLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  CreateDashoriginDashendpointDashmediaDashpackageLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateDashoriginDashendpointDashmediaDashpackageLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashchannelsDashmediaDashpackageLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashchannelsDashmediaDashpackageLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashchannelsDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashchannelsDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashinputDashdevicesDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashinputDashdevicesDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashinputsDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashinputsDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DescribeDashchannelDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DescribeDashchannelDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StopDashchannelDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StopDashchannelDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StartDashchannelDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StartDashchannelDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DeleteDashchannelDashmediaDashliveLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DeleteDashchannelDashmediaDashliveLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DescribeDashharvestDashjobLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DescribeDashharvestDashjobLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashharvestDashjobsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashharvestDashjobsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  CreateDashharvestDashjobLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - CreateDashharvestDashjobLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  ListDashoriginDashendpointsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - ListDashoriginDashendpointsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashapiDashmapLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashapiDashmapLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashpaymentDashintentLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashpaymentDashintentLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashcustomerLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashcustomerLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - >-
          StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashattachDashpaymentDashmethodLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashattachDashpaymentDashmethodLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashdetachDashpaymentDashmethodLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashdetachDashpaymentDashmethodLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashupdateDashpaymentDashmethodLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashupdateDashpaymentDashmethodLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashpriceLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashpriceLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashreoccuringDashpriceLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashreoccuringDashpriceLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashproductLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashproductLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashretrieveDashproductLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashretrieveDashproductLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashlistDashproductsLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashlistDashproductsLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashupdateDashproductLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashupdateDashproductLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashupdateDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashupdateDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcancelDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcancelDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcancelDashsubscriptionDasheopLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcancelDashsubscriptionDasheopLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashpauseDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashpauseDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashresumeDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashresumeDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashretrieveDashsubscriptionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashretrieveDashsubscriptionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  StripeDashcreateDashcustomerDashportalDashsessionLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StripeDashcreateDashcustomerDashportalDashsessionLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  IngestDashvodDashmerchandiseLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - IngestDashvodDashmerchandiseLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DeleteDashallDashvodDashmerchandiseLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DeleteDashallDashvodDashmerchandiseLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  DeleteDashvodDashmerchandiseDashbyDashidLambdaPermissionApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - DeleteDashvodDashmerchandiseDashbyDashidLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGatewayRestApi
          - /*/*
    DependsOn: []
  GatewayResponseDefault4XX:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  GatewayResponseDefault5XX:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: []
  NotesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Notes
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: noteId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  RequestResponsesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-request-responses
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: requestId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: requestId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  SNSMessagesTableTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-snsmessages
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: textId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: textId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  PurchasesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-purchases
      AttributeDefinitions:
        - AttributeName: purchaseId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: purchaseId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  MoviesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-movies
      AttributeDefinitions:
        - AttributeName: movieId
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  SocketsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Sockets
      AttributeDefinitions:
        - AttributeName: socketId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: socketId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  MediaMetaTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-MediaMeta
      AttributeDefinitions:
        - AttributeName: artistId
          AttributeType: S
        - AttributeName: movieId
          AttributeType: S
      KeySchema:
        - AttributeName: artistId
          KeyType: HASH
        - AttributeName: movieId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  DevicesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Devices
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: deviceId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: deviceId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  UserTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Users
      AttributeDefinitions:
        - AttributeName: emailAddress
          AttributeType: S
        - AttributeName: cogId
          AttributeType: S
      KeySchema:
        - AttributeName: emailAddress
          KeyType: HASH
        - AttributeName: cogId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  CreditCardTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-CreditCards
      AttributeDefinitions:
        - AttributeName: paymentMethodId
          AttributeType: S
        - AttributeName: emailAddress
          AttributeType: S
      KeySchema:
        - AttributeName: paymentMethodId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: emailAddressIndex
          KeySchema:
            - AttributeName: emailAddress
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  NewPurchasesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-NewPurchases
      AttributeDefinitions:
        - AttributeName: creditCardId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: creditCardId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  TransactionsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Transactions
      AttributeDefinitions:
        - AttributeName: creditCardId
          AttributeType: S
        - AttributeName: emailAddress
          AttributeType: S
      KeySchema:
        - AttributeName: creditCardId
          KeyType: HASH
        - AttributeName: emailAddress
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  UserAcquisitionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Acquistions
      AttributeDefinitions:
        - AttributeName: transactionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: transactionId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  StripeWebhookSuccessfulCheckout:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-StripeSuccessCheckout
      AttributeDefinitions:
        - AttributeName: checkoutId
          AttributeType: S
        - AttributeName: stripeCustomerId
          AttributeType: S
      KeySchema:
        - AttributeName: checkoutId
          KeyType: HASH
        - AttributeName: stripeCustomerId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  EventsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Events
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  TicketsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-Tickets
      AttributeDefinitions:
        - AttributeName: ticketId
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: ticketId
          KeyType: HASH
        - AttributeName: eventId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  MaestroEventsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-maestroEvents
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: email
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  MaestroSalesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-maestroSales
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: email
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  PlayerAnalyticsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ct-player-analytics
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: action
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: action
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    DependsOn: []
  AttachmentsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
    DependsOn: []
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: prod-branchdna-user-pool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
    DependsOn: []
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: prod-branchdna-user-pool-client
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
    DependsOn: []
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: prod-branchdnaIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt
            - CognitoUserPool
            - ProviderName
    DependsOn: []
  CognitoIdentityPoolRoles:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt
          - CognitoAuthRole
          - Arn
    DependsOn: []
  CognitoAuthRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource: !Join
                  - ""
                  - - "arn:aws:execute-api:"
                    - !Ref "AWS::Region"
                    - ":"
                    - !Ref "AWS::AccountId"
                    - ":"
                    - !Ref ApiGatewayRestApi
                    - /*
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Join
                    - ""
                    - - !GetAtt
                        - AttachmentsBucket
                        - Arn
                      - /private/
                      - $
                      - "{cognito-identity.amazonaws.com:sub}/*"
    DependsOn: []
  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: branchdna.pri
      HostedZoneConfig:
        Comment: !Sub
          - Hosted zone for branchdna.pri
          - {}
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: us-east-1
    DependsOn: []
  Logs:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7
    DependsOn: []
  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: []
  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Linux Bastion Host ssh and ICMP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Linux Bastion
    DependsOn: []
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
    DependsOn: []
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Path: /
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AssociateAddress"
                  - "ec2:DescribeVolumeStatus"
                  - "ec2:DescribeTag"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeVolumeAttribute"
                Resource:
                  - "*"
        - PolicyName: ec2tag
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateTags"
                Resource:
                  - "arn:aws:ec2:*:*:volume/*"
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
    DependsOn: []
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          default: "awslogs, config"
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub
                - |
                  [default]
                  region = ${AWS::Region}
                  [plugins]
                  cwlogs = cwlogs
                - {}
              mode: "000644"
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub
                - |
                  [general]
                  state_file = /var/lib/awslogs/agent-state
                  [/var/log/messages]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/messages
                  log_stream_name = {instance_id}/var/log/messages
                  log_group_name = ${Logs}
                  [/var/log/secure]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/secure
                  log_stream_name = {instance_id}/var/log/secure
                  log_group_name = ${Logs}
                  [/var/log/cron]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cron
                  log_stream_name = {instance_id}/var/log/cron
                  log_group_name = ${Logs}
                  [/var/log/cloud-init.log]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cloud-init.log
                  log_stream_name = {instance_id}/var/log/cloud-init.log
                  log_group_name = ${Logs}
                  [/var/log/cfn-init.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init.log
                  log_stream_name = {instance_id}/var/log/cfn-init.log
                  log_group_name = ${Logs}
                  [/var/log/cfn-hup.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-hup.log
                  log_stream_name = {instance_id}/var/log/cfn-hup.log
                  log_group_name = ${Logs}
                  [/var/log/cfn-init-cmd.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init-cmd.log
                  log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                  log_group_name = ${Logs}
                  [/var/log/cloud-init-output.log]
                  file = /var/log/cloud-init-output.log
                  log_stream_name = {instance_id}/var/log/cloud-init-output.log
                  log_group_name = ${Logs}
                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_stream_name = {instance_id}/var/log/dmesg
                  log_group_name = ${Logs}
                - Logs: !Ref Logs
              mode: "000644"
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                - {}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - >
                  [cfn-auto-reloader-hook]

                  triggers=post.update

                  path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init

                  action=/opt/aws/bin/cfn-init --verbose
                  --stack=${AWS::StackName} --region=${AWS::Region}
                  --resource=LaunchConfiguration

                  runas=root
                - {}
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-0915bcb5fa77e4892
      InstanceType: t3.micro
      SecurityGroups:
        - !Ref BastionSecurityGroup
      KeyName: branchDNA-production
      UserData: !Base64
        "Fn::Sub":
          - >
            #!/bin/bash -x

            for i in $(aws ec2 describe-volumes --region=${AWS::Region}
            --filters "Name=attachment.instance-id, Values=$(curl -s
            http://169.254.169.254/latest/meta-data/instance-id)"
            Name=attachment.device,Values=/dev/xvda --query "Volumes[].VolumeId"
            --out text) ; do aws --region=${AWS::Region} ec2 create-tags
            --resources $i --tags Key=Name,Value=Bastion-/dev/sda1 ; done

            yum update -y

            yum install amazon-ssm-agent python-deltarpm -y

            start amazon-ssm-agent | true

            echo "start amazon-ssm-agent" >> /etc/rc.local

            bash -ex << "TRY"
              INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
              aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP_AllocationId}
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
            TRY

            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource
            AutoScalingGroup --region ${AWS::Region}
          - EIP_AllocationId: !GetAtt
              - EIP
              - AllocationId
    DependsOn: []
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: Name
          Value: Bastion
          PropagateAtLaunch: "true"
        - Key: AmazonLinuxUpdatesScan
          Value: true
          PropagateAtLaunch: "true"
        - Key: AmazonLinuxUpdatesGroup1
          Value: true
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    DependsOn: []
  20NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AppSubnet2Parameter: !Ref AppSubnet2
        AppSubnet1Parameter: !Ref AppSubnet1
        AppSecurityGroupParameter: !Ref AppSecurityGroup
        IamRoleLambdaExecutionArnParameter: !GetAtt
          - IamRoleLambdaExecution
          - Arn
        ServerlessDeploymentBucketParameter: !Ref ServerlessDeploymentBucket
        ListDashchannelsDashmediaDashliveLambdaFunctionParameter: !Ref ListDashchannelsDashmediaDashliveLambdaFunction
        StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunctionParameter:
          !Ref >-
          StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunction
        ApiGatewayRestApiParameter: !Ref ApiGatewayRestApi
        ApiGatewayResourceApiV1Parameter: !Ref ApiGatewayResourceApiV1
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-20-nested-stack.json
    DependsOn:
      - AppSubnet2
      - AppSubnet1
      - AppSecurityGroup
      - IamRoleLambdaExecution
      - ServerlessDeploymentBucket
      - ListDashchannelsDashmediaDashliveLambdaFunction
      - >-
        StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunction
      - ApiGatewayRestApi
      - ApiGatewayResourceApiV1
  13NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        CreateLambdaFunctionParameter: !Ref CreateLambdaFunction
        DeleteDashchannelDashmediaDashliveLambdaFunctionParameter: !Ref DeleteDashchannelDashmediaDashliveLambdaFunction
        ListDashharvestDashjobsLambdaFunctionParameter: !Ref ListDashharvestDashjobsLambdaFunction
        IngestDashvodDashmerchandiseLambdaFunctionParameter: !Ref IngestDashvodDashmerchandiseLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-13-nested-stack.json
    DependsOn:
      - CreateLambdaFunction
      - DeleteDashchannelDashmediaDashliveLambdaFunction
      - ListDashharvestDashjobsLambdaFunction
      - IngestDashvodDashmerchandiseLambdaFunction
  6NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        GetLambdaFunctionParameter: !Ref GetLambdaFunction
        StripeDashcreateDashreoccuringDashpriceLambdaFunctionParameter: !Ref StripeDashcreateDashreoccuringDashpriceLambdaFunction
        StripeDashresumeDashsubscriptionLambdaFunctionParameter: !Ref StripeDashresumeDashsubscriptionLambdaFunction
        StripeDashcreateDashcustomerDashportalDashsessionLambdaFunctionParameter: !Ref StripeDashcreateDashcustomerDashportalDashsessionLambdaFunction
        DeleteDashallDashvodDashmerchandiseLambdaFunctionParameter: !Ref DeleteDashallDashvodDashmerchandiseLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-6-nested-stack.json
    DependsOn:
      - GetLambdaFunction
      - StripeDashcreateDashreoccuringDashpriceLambdaFunction
      - StripeDashresumeDashsubscriptionLambdaFunction
      - StripeDashcreateDashcustomerDashportalDashsessionLambdaFunction
      - DeleteDashallDashvodDashmerchandiseLambdaFunction
  8NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ListLambdaFunctionParameter: !Ref ListLambdaFunction
        SendSMSLambdaFunctionParameter: !Ref SendSMSLambdaFunction
        MonthlyDashactivityDashcronLambdaFunctionParameter: !Ref MonthlyDashactivityDashcronLambdaFunction
        StripeDashcreateDashproductLambdaFunctionParameter: !Ref StripeDashcreateDashproductLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-8-nested-stack.json
    DependsOn:
      - ListLambdaFunction
      - SendSMSLambdaFunction
      - MonthlyDashactivityDashcronLambdaFunction
      - StripeDashcreateDashproductLambdaFunction
  2NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        UpdateLambdaFunctionParameter: !Ref UpdateLambdaFunction
        CreateDashoriginDashendpointDashmediaDashpackageLambdaFunctionParameter: !Ref CreateDashoriginDashendpointDashmediaDashpackageLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-2-nested-stack.json
    DependsOn:
      - UpdateLambdaFunction
      - CreateDashoriginDashendpointDashmediaDashpackageLambdaFunction
  17NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        DeleteLambdaFunctionParameter: !Ref DeleteLambdaFunction
        FetchAllPurchaseablesLambdaFunctionParameter: !Ref FetchAllPurchaseablesLambdaFunction
        StripeHandleSubscriptionsWebhookLambdaFunctionParameter: !Ref StripeHandleSubscriptionsWebhookLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-17-nested-stack.json
    DependsOn:
      - DeleteLambdaFunction
      - FetchAllPurchaseablesLambdaFunction
      - StripeHandleSubscriptionsWebhookLambdaFunction
  5NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        PurchasesLambdaFunctionParameter: !Ref PurchasesLambdaFunction
        StripeSuccessfulCheckoutWebhookLambdaFunctionParameter: !Ref StripeSuccessfulCheckoutWebhookLambdaFunction
        StripeEverythingWebhookLambdaFunctionParameter: !Ref StripeEverythingWebhookLambdaFunction
        StripePaymentIntentSuccessWebhookLambdaFunctionParameter: !Ref StripePaymentIntentSuccessWebhookLambdaFunction
        CreateDashchannelDashmediaDashliveLambdaFunctionParameter: !Ref CreateDashchannelDashmediaDashliveLambdaFunction
        StripeDashcreateDashpaymentDashintentLambdaFunctionParameter: !Ref StripeDashcreateDashpaymentDashintentLambdaFunction
        StripeDashlistDashproductsLambdaFunctionParameter: !Ref StripeDashlistDashproductsLambdaFunction
        StripeDashupdateDashproductLambdaFunctionParameter: !Ref StripeDashupdateDashproductLambdaFunction
        StripeDashretrieveDashsubscriptionLambdaFunctionParameter: !Ref StripeDashretrieveDashsubscriptionLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-5-nested-stack.json
    DependsOn:
      - PurchasesLambdaFunction
      - StripeSuccessfulCheckoutWebhookLambdaFunction
      - StripeEverythingWebhookLambdaFunction
      - StripePaymentIntentSuccessWebhookLambdaFunction
      - CreateDashchannelDashmediaDashliveLambdaFunction
      - StripeDashcreateDashpaymentDashintentLambdaFunction
      - StripeDashlistDashproductsLambdaFunction
      - StripeDashupdateDashproductLambdaFunction
      - StripeDashretrieveDashsubscriptionLambdaFunction
  15NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        DeviceActivateLambdaFunctionParameter: !Ref DeviceActivateLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-15-nested-stack.json
    DependsOn:
      - DeviceActivateLambdaFunction
  4NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        StripeHandleInvoiceWebhookLambdaFunctionParameter: !Ref StripeHandleInvoiceWebhookLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-4-nested-stack.json
    DependsOn:
      - StripeHandleInvoiceWebhookLambdaFunction
  14NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        StripeChargeSuccessWebhookLambdaFunctionParameter: !Ref StripeChargeSuccessWebhookLambdaFunction
        ListDashoriginDashendpointsLambdaFunctionParameter: !Ref ListDashoriginDashendpointsLambdaFunction
        StripeDashapiDashmapLambdaFunctionParameter: !Ref StripeDashapiDashmapLambdaFunction
        StripeDashcreateDashsubscriptionLambdaFunctionParameter: !Ref StripeDashcreateDashsubscriptionLambdaFunction
        StripeDashpauseDashsubscriptionLambdaFunctionParameter: !Ref StripeDashpauseDashsubscriptionLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-14-nested-stack.json
    DependsOn:
      - StripeChargeSuccessWebhookLambdaFunction
      - ListDashoriginDashendpointsLambdaFunction
      - StripeDashapiDashmapLambdaFunction
      - StripeDashcreateDashsubscriptionLambdaFunction
      - StripeDashpauseDashsubscriptionLambdaFunction
  18NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        FetchUserMetaByEmailLambdaFunctionParameter: !Ref FetchUserMetaByEmailLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-18-nested-stack.json
    DependsOn:
      - FetchUserMetaByEmailLambdaFunction
  19NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        PlayerDashanalyticsLambdaFunctionParameter: !Ref PlayerDashanalyticsLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-19-nested-stack.json
    DependsOn:
      - PlayerDashanalyticsLambdaFunction
  7NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        CreateDashchannelDashmediaDashpackageLambdaFunctionParameter: !Ref CreateDashchannelDashmediaDashpackageLambdaFunction
        DescribeDashchannelDashmediaDashliveLambdaFunctionParameter: !Ref DescribeDashchannelDashmediaDashliveLambdaFunction
        CreateDashharvestDashjobLambdaFunctionParameter: !Ref CreateDashharvestDashjobLambdaFunction
        StripeDashcreateDashcustomerLambdaFunctionParameter: !Ref StripeDashcreateDashcustomerLambdaFunction
        StripeDashcreateDashpriceLambdaFunctionParameter: !Ref StripeDashcreateDashpriceLambdaFunction
        DeleteDashvodDashmerchandiseDashbyDashidLambdaFunctionParameter: !Ref DeleteDashvodDashmerchandiseDashbyDashidLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-7-nested-stack.json
    DependsOn:
      - CreateDashchannelDashmediaDashpackageLambdaFunction
      - DescribeDashchannelDashmediaDashliveLambdaFunction
      - CreateDashharvestDashjobLambdaFunction
      - StripeDashcreateDashcustomerLambdaFunction
      - StripeDashcreateDashpriceLambdaFunction
      - DeleteDashvodDashmerchandiseDashbyDashidLambdaFunction
  16NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ListDashchannelsDashmediaDashpackageLambdaFunctionParameter: !Ref ListDashchannelsDashmediaDashpackageLambdaFunction
        StripeDashdetachDashpaymentDashmethodLambdaFunctionParameter: !Ref StripeDashdetachDashpaymentDashmethodLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-16-nested-stack.json
    DependsOn:
      - ListDashchannelsDashmediaDashpackageLambdaFunction
      - StripeDashdetachDashpaymentDashmethodLambdaFunction
  1NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ListDashinputDashdevicesDashmediaDashliveLambdaFunctionParameter: !Ref ListDashinputDashdevicesDashmediaDashliveLambdaFunction
        StripeDashattachDashpaymentDashmethodLambdaFunctionParameter: !Ref StripeDashattachDashpaymentDashmethodLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-1-nested-stack.json
    DependsOn:
      - ListDashinputDashdevicesDashmediaDashliveLambdaFunction
      - StripeDashattachDashpaymentDashmethodLambdaFunction
  12NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ListDashinputsDashmediaDashliveLambdaFunctionParameter: !Ref ListDashinputsDashmediaDashliveLambdaFunction
        BillingLambdaFunctionParameter: !Ref BillingLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-12-nested-stack.json
    DependsOn:
      - ListDashinputsDashmediaDashliveLambdaFunction
      - BillingLambdaFunction
  3NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        StopDashchannelDashmediaDashliveLambdaFunctionParameter: !Ref StopDashchannelDashmediaDashliveLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-3-nested-stack.json
    DependsOn:
      - StopDashchannelDashmediaDashliveLambdaFunction
  10NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        StartDashchannelDashmediaDashliveLambdaFunctionParameter: !Ref StartDashchannelDashmediaDashliveLambdaFunction
        DescribeDashharvestDashjobLambdaFunctionParameter: !Ref DescribeDashharvestDashjobLambdaFunction
        DailyDashactivityDashcronLambdaFunctionParameter: !Ref DailyDashactivityDashcronLambdaFunction
        StripeDashupdateDashpaymentDashmethodLambdaFunctionParameter: !Ref StripeDashupdateDashpaymentDashmethodLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-10-nested-stack.json
    DependsOn:
      - StartDashchannelDashmediaDashliveLambdaFunction
      - DescribeDashharvestDashjobLambdaFunction
      - DailyDashactivityDashcronLambdaFunction
      - StripeDashupdateDashpaymentDashmethodLambdaFunction
  11NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        SendDashmailDashcronLambdaFunctionParameter: !Ref SendDashmailDashcronLambdaFunction
        StripeDashretrieveDashproductLambdaFunctionParameter: !Ref StripeDashretrieveDashproductLambdaFunction
        StripeDashcancelDashsubscriptionLambdaFunctionParameter: !Ref StripeDashcancelDashsubscriptionLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-11-nested-stack.json
    DependsOn:
      - SendDashmailDashcronLambdaFunction
      - StripeDashretrieveDashproductLambdaFunction
      - StripeDashcancelDashsubscriptionLambdaFunction
  9NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        StripeDashupdateDashsubscriptionLambdaFunctionParameter: !Ref StripeDashupdateDashsubscriptionLambdaFunction
        StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter: !Ref StripeDashcancelDashsubscriptionDasheopLambdaFunction
      TemplateURL: !Join
        - /
        - - "https://s3.us-east-1.amazonaws.com"
          - !Ref ServerlessDeploymentBucket
          - "serverless/branchdna-api/prod/1668907026263-2022-11-20T01:17:06.263Z"
          - cloudformation-template-9-nested-stack.json
    DependsOn:
      - StripeDashupdateDashsubscriptionLambdaFunction
      - StripeDashcancelDashsubscriptionDasheopLambdaFunction
Outputs:
  ServerlessDeploymentBucketName:
    Value: !Ref ServerlessDeploymentBucket
    Export:
      Name: sls-branchdna-api-prod-ServerlessDeploymentBucketName
  VPC:
    Description: VPC logical resource ID
    Value: !Ref VPC
    Export:
      Name: sls-branchdna-api-prod-VPC
  LambdaExecutionSecurityGroupId:
    Description: DEPRECATED - Please use AppSecurityGroupId instead
    Value: !Ref AppSecurityGroup
    Export:
      Name: sls-branchdna-api-prod-LambdaExecutionSecurityGroupId
  AppSecurityGroupId:
    Description: Security Group ID that the applications use when executing within the VPC
    Value: !Ref AppSecurityGroup
    Export:
      Name: sls-branchdna-api-prod-AppSecurityGroupId
  RDSSubnetGroup:
    Description: Subnet Group for rds
    Value: !Ref RDSSubnetGroup
    Export:
      Name: sls-branchdna-api-prod-RDSSubnetGroup
  RedshiftSubnetGroup:
    Description: Subnet Group for redshift
    Value: !Ref RedshiftSubnetGroup
    Export:
      Name: sls-branchdna-api-prod-RedshiftSubnetGroup
  ElastiCacheSubnetGroup:
    Description: Subnet Group for elasticache
    Value: !Ref ElastiCacheSubnetGroup
    Export:
      Name: sls-branchdna-api-prod-ElastiCacheSubnetGroup
  DAXSubnetGroup:
    Description: Subnet Group for dax
    Value: !Ref DAXSubnetGroup
    Export:
      Name: sls-branchdna-api-prod-DAXSubnetGroup
  AppSubnet1:
    Value: !Ref AppSubnet1
    Export:
      Name: sls-branchdna-api-prod-AppSubnet1
  AppSubnet2:
    Value: !Ref AppSubnet2
    Export:
      Name: sls-branchdna-api-prod-AppSubnet2
  CreateLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 13NestedStack
      - Outputs.CreateLambdaVersionfmeDBy7QdXFMjx78pTqOn9wj9zJJGcjFgSfg5KvW1cE
    Export:
      Name: sls-branchdna-api-prod-CreateLambdaFunctionQualifiedArn
  GetLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 6NestedStack
      - Outputs.GetLambdaVersionXQ4BueTT1Rlut28CqGh86yt62gogj9veALGUeeXsU
    Export:
      Name: sls-branchdna-api-prod-GetLambdaFunctionQualifiedArn
  ListLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 8NestedStack
      - Outputs.ListLambdaVersionRfkBm0qSeT2tks1gYM1DRCC5ykjaJVOKDKDek1HRps
    Export:
      Name: sls-branchdna-api-prod-ListLambdaFunctionQualifiedArn
  UpdateLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 2NestedStack
      - Outputs.UpdateLambdaVersionYv4KN5RNP7U0p6oXUrWr1cLy75v8pBaGtrU9CTZtCw
    Export:
      Name: sls-branchdna-api-prod-UpdateLambdaFunctionQualifiedArn
  DeleteLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 17NestedStack
      - Outputs.DeleteLambdaVersionT9sQlWPXhGry3p991IYwAuGo3gHQQqDSgjyYO65YahA
    Export:
      Name: sls-branchdna-api-prod-DeleteLambdaFunctionQualifiedArn
  PurchasesLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - Outputs.PurchasesLambdaVersionZGdUCSiZ7IuqyEJ9E7XMTiYQASKN871SJQQtgRp0
    Export:
      Name: sls-branchdna-api-prod-PurchasesLambdaFunctionQualifiedArn
  SendSMSLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 8NestedStack
      - Outputs.SendSMSLambdaVersionRKJgcF9qu814h9YuwlJgB3fbuQlcA23otLH2eX4rc
    Export:
      Name: sls-branchdna-api-prod-SendSMSLambdaFunctionQualifiedArn
  DeviceActivateLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 15NestedStack
      - >-
        Outputs.DeviceActivateLambdaVersionTWhCxPga5B1ZiRQtbbytSnTi9vKAJUqyYEWuQ7KqqcQ
    Export:
      Name: sls-branchdna-api-prod-DeviceActivateLambdaFunctionQualifiedArn
  StripeSuccessfulCheckoutWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeSuccessfulCheckoutWebhookLambdaVersionbMPfbsCM8hzDToFFKemQ72E14CLJthiqhk0RmSpH77Q
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeSuccessfulCheckoutWebhookLambdaFunctionQualifiedArn
  StripeHandleInvoiceWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 4NestedStack
      - >-
        Outputs.StripeHandleInvoiceWebhookLambdaVersion0sq0UqNsZp7iPxoFZnlo8XNVkry9uQgQNaZquldGf4
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeHandleInvoiceWebhookLambdaFunctionQualifiedArn
  StripeEverythingWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeEverythingWebhookLambdaVersionIJgZsSrc12YORlkNna8myzpZ0goiPKqBGrLjcA4jPzk
    Export:
      Name: sls-branchdna-api-prod-StripeEverythingWebhookLambdaFunctionQualifiedArn
  StripePaymentIntentSuccessWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripePaymentIntentSuccessWebhookLambdaVersion17ur2oU2XVGM5gRgzaZsNAULhzKxp6cK9mXDy8xKYg
    Export:
      Name: >-
        sls-branchdna-api-prod-StripePaymentIntentSuccessWebhookLambdaFunctionQualifiedArn
  StripeChargeSuccessWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 14NestedStack
      - >-
        Outputs.StripeChargeSuccessWebhookLambdaVersionWXqAE16OcYt6dsEpcCkj7TqOP1XBtK4cDgfqZgllPw
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeChargeSuccessWebhookLambdaFunctionQualifiedArn
  FetchUserMetaByEmailLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 18NestedStack
      - >-
        Outputs.FetchUserMetaByEmailLambdaVersionuVPZMEXn7joft3qtnraxC2m38wq98j4mp38IwEhQv4
    Export:
      Name: sls-branchdna-api-prod-FetchUserMetaByEmailLambdaFunctionQualifiedArn
  FetchAllPurchaseablesLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 17NestedStack
      - >-
        Outputs.FetchAllPurchaseablesLambdaVersionBTOUSimGOlXhan4Wg2rDDztgURPWYT8hEjVudoEac
    Export:
      Name: sls-branchdna-api-prod-FetchAllPurchaseablesLambdaFunctionQualifiedArn
  PlayerDashanalyticsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 19NestedStack
      - >-
        Outputs.PlayerDashanalyticsLambdaVersion5MKOFj8lFAiD1RsPGq1M4l5gW9RDmJ63urLP19O7zZE
    Export:
      Name: sls-branchdna-api-prod-PlayerDashanalyticsLambdaFunctionQualifiedArn
  CreateDashchannelDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.CreateDashchannelDashmediaDashliveLambdaVersionbtvSC2BpNv3Wb6v6dTJzORNOVm4LDE1CRjp0jZ6yNg
    Export:
      Name: >-
        sls-branchdna-api-prod-CreateDashchannelDashmediaDashliveLambdaFunctionQualifiedArn
  CreateDashchannelDashmediaDashpackageLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.CreateDashchannelDashmediaDashpackageLambdaVersioniyQgpj74Z3UEKgp1VnxqJIlE3392Z99xRLFVN8v35g
    Export:
      Name: >-
        sls-branchdna-api-prod-CreateDashchannelDashmediaDashpackageLambdaFunctionQualifiedArn
  CreateDashoriginDashendpointDashmediaDashpackageLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 2NestedStack
      - >-
        Outputs.CreateDashoriginDashendpointDashmediaDashpackageLambdaVersionrhJIXInalOvOcU8WZsao8LXBXffYYELJdHmID8ND80
    Export:
      Name: >-
        sls-branchdna-api-prod-CreateDashoriginDashendpointDashmediaDashpackageLambdaFunctionQualifiedArn
  ListDashchannelsDashmediaDashpackageLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 16NestedStack
      - >-
        Outputs.ListDashchannelsDashmediaDashpackageLambdaVersionOSOFgDzsfgxjTQpnQOcQWe0NJ9PF6NPvQLkEDIf14
    Export:
      Name: >-
        sls-branchdna-api-prod-ListDashchannelsDashmediaDashpackageLambdaFunctionQualifiedArn
  ListDashchannelsDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 20NestedStack
      - >-
        Outputs.ListDashchannelsDashmediaDashliveLambdaVersioneNHi5DmFo1rnuxXUTXvjuXlxfEj1tV255PXoZE4CHw
    Export:
      Name: >-
        sls-branchdna-api-prod-ListDashchannelsDashmediaDashliveLambdaFunctionQualifiedArn
  ListDashinputDashdevicesDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 1NestedStack
      - >-
        Outputs.ListDashinputDashdevicesDashmediaDashliveLambdaVersion3LVWUNn9LZdjjAl0Ce6X2Wm5KYzYgfq59ZdHwN9pY
    Export:
      Name: >-
        sls-branchdna-api-prod-ListDashinputDashdevicesDashmediaDashliveLambdaFunctionQualifiedArn
  ListDashinputsDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 12NestedStack
      - >-
        Outputs.ListDashinputsDashmediaDashliveLambdaVersion9q2L9oIF0xqDEa1QcQu22mgHMNnwNtFQsJjHvBZEA
    Export:
      Name: >-
        sls-branchdna-api-prod-ListDashinputsDashmediaDashliveLambdaFunctionQualifiedArn
  DescribeDashchannelDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.DescribeDashchannelDashmediaDashliveLambdaVersionua4KMJ3IrUdRUDd2PHA8SoSgGCztosJfi8wJnDjnQ
    Export:
      Name: >-
        sls-branchdna-api-prod-DescribeDashchannelDashmediaDashliveLambdaFunctionQualifiedArn
  StopDashchannelDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 3NestedStack
      - >-
        Outputs.StopDashchannelDashmediaDashliveLambdaVersionkJeIT3asNkaBHSNhBMTdMvmB6T5SRmgVlSyfvjns70
    Export:
      Name: >-
        sls-branchdna-api-prod-StopDashchannelDashmediaDashliveLambdaFunctionQualifiedArn
  StartDashchannelDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 10NestedStack
      - >-
        Outputs.StartDashchannelDashmediaDashliveLambdaVersionxr5LvFgru0yU3JCz9sz1qL9mXKdooDMGh2c6OV41Qg
    Export:
      Name: >-
        sls-branchdna-api-prod-StartDashchannelDashmediaDashliveLambdaFunctionQualifiedArn
  DeleteDashchannelDashmediaDashliveLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 13NestedStack
      - >-
        Outputs.DeleteDashchannelDashmediaDashliveLambdaVersionukFAG1O1C5yAgzHEHek5IltlFec3Kl4860pmouHCM
    Export:
      Name: >-
        sls-branchdna-api-prod-DeleteDashchannelDashmediaDashliveLambdaFunctionQualifiedArn
  DescribeDashharvestDashjobLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 10NestedStack
      - >-
        Outputs.DescribeDashharvestDashjobLambdaVersionFPCgLkO47OZ65O9foQJDxCnnQy9plnK722rkCFo4I8s
    Export:
      Name: >-
        sls-branchdna-api-prod-DescribeDashharvestDashjobLambdaFunctionQualifiedArn
  ListDashharvestDashjobsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 13NestedStack
      - >-
        Outputs.ListDashharvestDashjobsLambdaVersionpgKavcaX1zNnwQlLDqQNkgXau99Z1IJpNFKux3XmGk
    Export:
      Name: sls-branchdna-api-prod-ListDashharvestDashjobsLambdaFunctionQualifiedArn
  CreateDashharvestDashjobLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.CreateDashharvestDashjobLambdaVersionnQk8BgAEbvhdoW4r5dWULNhrY2KgcjMwRVXmn4Wp9w
    Export:
      Name: >-
        sls-branchdna-api-prod-CreateDashharvestDashjobLambdaFunctionQualifiedArn
  ListDashoriginDashendpointsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 14NestedStack
      - >-
        Outputs.ListDashoriginDashendpointsLambdaVersionLEkzpRSjSxr3hIqtHxTPyguixnnsh7MxGATmhqIWk
    Export:
      Name: >-
        sls-branchdna-api-prod-ListDashoriginDashendpointsLambdaFunctionQualifiedArn
  DescribeDashoriginDashendpointLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 20NestedStack
      - >-
        Outputs.DescribeDashoriginDashendpointLambdaVersionDmLU26tdZPDDty5wlKiB4JWhvPtZBw1EiBanvPe0XY
    Export:
      Name: >-
        sls-branchdna-api-prod-DescribeDashoriginDashendpointLambdaFunctionQualifiedArn
  StripeDashapiDashmapLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 14NestedStack
      - >-
        Outputs.StripeDashapiDashmapLambdaVersionJ3GsHwYsqYwFtzVHMWt9CKMq3IyvAklkO45vevwiI
    Export:
      Name: sls-branchdna-api-prod-StripeDashapiDashmapLambdaFunctionQualifiedArn
  DailyDashactivityDashcronLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 10NestedStack
      - >-
        Outputs.DailyDashactivityDashcronLambdaVersionFttU76L9LQv1cvIi3p5vVCAUUE87BLLwg6T1VPVrYI
    Export:
      Name: >-
        sls-branchdna-api-prod-DailyDashactivityDashcronLambdaFunctionQualifiedArn
  MonthlyDashactivityDashcronLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 8NestedStack
      - >-
        Outputs.MonthlyDashactivityDashcronLambdaVersionksmpXztuYsURqtJRWSpqqNPcuxhQqUj9SMNqNybVA
    Export:
      Name: >-
        sls-branchdna-api-prod-MonthlyDashactivityDashcronLambdaFunctionQualifiedArn
  SendDashmailDashcronLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 11NestedStack
      - >-
        Outputs.SendDashmailDashcronLambdaVersionPh8b2XP8SNo25bvdadIL1v0km1f0j8eIMwlueW8
    Export:
      Name: sls-branchdna-api-prod-SendDashmailDashcronLambdaFunctionQualifiedArn
  BillingLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 12NestedStack
      - Outputs.BillingLambdaVersionsooUJtKXuY14JaDGsObKQzwo7klyvd1n7pIqcbXwu14
    Export:
      Name: sls-branchdna-api-prod-BillingLambdaFunctionQualifiedArn
  StripeDashcreateDashpaymentDashintentLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeDashcreateDashpaymentDashintentLambdaVersionYveli0coEYLucG5wDCPhlYgPA5Zm71dJyfgXP8aedhA
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashpaymentDashintentLambdaFunctionQualifiedArn
  StripeDashcreateDashcustomerLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.StripeDashcreateDashcustomerLambdaVersionSo1k6RWu21SvqQUDrsYuX6qqtjnlWGf5KDDOYVGYVg
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashcustomerLambdaFunctionQualifiedArn
  StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 20NestedStack
      - >-
        Outputs.StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaVersion2BLVWd86BfbpYIobYYTO8Ql1ZOSdBTEYJXzkfwq8
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashupdateDashcustomerDashdefaultDashpaymentDashmethodLambdaFunctionQualifiedArn
  StripeDashattachDashpaymentDashmethodLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 1NestedStack
      - >-
        Outputs.StripeDashattachDashpaymentDashmethodLambdaVersionqzNAP7UkBntvECUZrkhOwTojUJCkiiSLvpX2Ikq1mp0
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashattachDashpaymentDashmethodLambdaFunctionQualifiedArn
  StripeDashdetachDashpaymentDashmethodLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 16NestedStack
      - >-
        Outputs.StripeDashdetachDashpaymentDashmethodLambdaVersionYqtRdwuU8Kpzc5BfqQoqJOEhJoRZCkpTd3DIqvthBlY
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashdetachDashpaymentDashmethodLambdaFunctionQualifiedArn
  StripeDashupdateDashpaymentDashmethodLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 10NestedStack
      - >-
        Outputs.StripeDashupdateDashpaymentDashmethodLambdaVersionbrua1VoE0IJFXzwt2CKLajayQ0ASNtuISLhTUHNSI
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashupdateDashpaymentDashmethodLambdaFunctionQualifiedArn
  StripeDashcreateDashpriceLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.StripeDashcreateDashpriceLambdaVersionIrfhUMkgpkaaid2Xj26bAEeneJ5kGbhNiKzRetUc
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashpriceLambdaFunctionQualifiedArn
  StripeDashcreateDashreoccuringDashpriceLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 6NestedStack
      - >-
        Outputs.StripeDashcreateDashreoccuringDashpriceLambdaVersionv3o9d73TZQTOg04jDPrj5Q1BLbcNcByjVinGRiEQ4U
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashreoccuringDashpriceLambdaFunctionQualifiedArn
  StripeDashcreateDashproductLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 8NestedStack
      - >-
        Outputs.StripeDashcreateDashproductLambdaVersionp0T8uReeuSqo4Z4oLlRoCRsVp7UQq4BFCQQB3OVjU
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashproductLambdaFunctionQualifiedArn
  StripeDashretrieveDashproductLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 11NestedStack
      - >-
        Outputs.StripeDashretrieveDashproductLambdaVersionLN0anGEborbakLfPzMNAtuH7Cc8IquW1kMQlwxwWTsQ
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashretrieveDashproductLambdaFunctionQualifiedArn
  StripeDashlistDashproductsLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeDashlistDashproductsLambdaVersionwFbglAPJe79SdWWFhnTuq4hHTwJ02xzH7kWcIewp4
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashlistDashproductsLambdaFunctionQualifiedArn
  StripeDashupdateDashproductLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeDashupdateDashproductLambdaVersionHaHTYQ3Yz9E0QpxXvggGIjXmor9WniNLDARkmIjEY
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashupdateDashproductLambdaFunctionQualifiedArn
  StripeDashcreateDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 14NestedStack
      - >-
        Outputs.StripeDashcreateDashsubscriptionLambdaVersionYpjDTN27lQGwKE6Vo3RimXx4APLIQYSEswFJaBbQ
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashupdateDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 9NestedStack
      - >-
        Outputs.StripeDashupdateDashsubscriptionLambdaVersionzUvb82dmJJCFPcM4QLiZOHcsbavfy2glUhplJZ9frQ
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashupdateDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashcancelDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 11NestedStack
      - >-
        Outputs.StripeDashcancelDashsubscriptionLambdaVersionDe8eSQ8qmRFTxEFhC38wdRIQ5BAGxwTkotuvk6Bzhs
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcancelDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashcancelDashsubscriptionDasheopLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 9NestedStack
      - >-
        Outputs.StripeDashcancelDashsubscriptionDasheopLambdaVersionW9VDbSuyXREO1ZpULVVO1JWnnGlx9h0tELcbD9Y6vQ
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcancelDashsubscriptionDasheopLambdaFunctionQualifiedArn
  StripeDashpauseDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 14NestedStack
      - >-
        Outputs.StripeDashpauseDashsubscriptionLambdaVersion9WUYwO0MRK1fcQf0Wux94Ql3tNgVOFXSXC3RbmbodjQ
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashpauseDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashresumeDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 6NestedStack
      - >-
        Outputs.StripeDashresumeDashsubscriptionLambdaVersionZpLH5gFoyyaLcBlX0OlFsJ07BCMGACxr0tu9wjPpk
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashresumeDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashretrieveDashsubscriptionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 5NestedStack
      - >-
        Outputs.StripeDashretrieveDashsubscriptionLambdaVersion8Mlc0JiljSZweiuuibGZVLmMdsYBZIcKQc8JBGNTo
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashretrieveDashsubscriptionLambdaFunctionQualifiedArn
  StripeDashcreateDashcustomerDashportalDashsessionLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 6NestedStack
      - >-
        Outputs.StripeDashcreateDashcustomerDashportalDashsessionLambdaVersion8YoNThEfWp6vpkIqcYif0rIS9W4tsQFWjwESj05BDg
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeDashcreateDashcustomerDashportalDashsessionLambdaFunctionQualifiedArn
  StripeHandleSubscriptionsWebhookLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 17NestedStack
      - >-
        Outputs.StripeHandleSubscriptionsWebhookLambdaVersion6eUsmmpoJamaQpSs6aAGbx4dxONn6mGTA7ci4jy9rw
    Export:
      Name: >-
        sls-branchdna-api-prod-StripeHandleSubscriptionsWebhookLambdaFunctionQualifiedArn
  IngestDashvodDashmerchandiseLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 13NestedStack
      - >-
        Outputs.IngestDashvodDashmerchandiseLambdaVersionx5HPE2mvJIS1AuPkzaJcfFUeAjdAnRVBHwPwkmx4
    Export:
      Name: >-
        sls-branchdna-api-prod-IngestDashvodDashmerchandiseLambdaFunctionQualifiedArn
  DeleteDashallDashvodDashmerchandiseLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 6NestedStack
      - >-
        Outputs.DeleteDashallDashvodDashmerchandiseLambdaVersioneHVS8AdBis4mhVoci2ZDcXYBcSCyNZiUJunjjlq9js
    Export:
      Name: >-
        sls-branchdna-api-prod-DeleteDashallDashvodDashmerchandiseLambdaFunctionQualifiedArn
  DeleteDashvodDashmerchandiseDashbyDashidLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !GetAtt
      - 7NestedStack
      - >-
        Outputs.DeleteDashvodDashmerchandiseDashbyDashidLambdaVersionNzEtznhspMJvz0YSmFWia28in8ODDImv7lBFvZBQ
    Export:
      Name: >-
        sls-branchdna-api-prod-DeleteDashvodDashmerchandiseDashbyDashidLambdaFunctionQualifiedArn
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join
      - ""
      - - "https://"
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref "AWS::Region"
        - .
        - !Ref "AWS::URLSuffix"
        - /prod
    Export:
      Name: sls-branchdna-api-prod-ServiceEndpoint
  AttachmentsBucketName:
    Value: !Ref AttachmentsBucket
  UserPoolId:
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  IdentityPoolId:
    Value: !Ref CognitoIdentityPool
Parameters:
  AppSecurityGroupParameter:
    Type: String
    Default: sg-0d83d2d74da4d13a0
  AppSubnet1Parameter:
    Type: String
    Default: subnet-07c41b4d72bb633ba
  AppSubnet2Parameter:
    Type: String
    Default: subnet-0a5b45ebc47fbda66
