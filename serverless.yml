service: branchdna-api
variablesResolutionMode: 20210326
useDotenv: true
# Create an optimized package for our functions
package:
  individually: true

  # https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/applications/branchdna-api-prod

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-dynamodb-seed
  - serverless-vpc-plugin
  # - serverless-plugin-split-stacks
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  # stage: ${opt:stage, self:provider.stage}-branchdna
  stage: ${env:DEPLOY_STAGE}-branchdna
  # splitStacks:
  #   nestedStackCount: 20 # Controls the number of created nested stacks
  #   perFunction: false
  #   perType: false
  #   perGroupFunction: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: offline
    seed:
      domain:
        sources:
          - table: ${env:MEDIA_META_TABLE}
            sources: [./resources/seeds/movieMetaSeed.json]
          - table: ${env:USER_TABLE}
            sources: [./resources/seeds/import-users.json]
          - table: ${env:EVENTS_TABLE}
            sources: [./resources/seeds/events.json]
  seed:
    movie-meta-seed:
      table: ${env:MEDIA_META_TABLE}
      sources:
        - [./resources/seeds/movieMetaSeed.json]

  vpcConfig:
    cidrBlock: "10.0.0.0/16"
    createNatGateway: 2
    createDbSubnet: true
    zones:
      - us-east-1a
      - us-east-1b

  Route53config:
    Region: us-east-1
    Name: branchdna.pri

  # ElastiCacheconfig:
  #   CACHE_INSTANCE_SIZE: cache.r6g.large

  # SQSConfig:
  #   QueueName: couchtour-queue.fifo
  #   FifoQueue: true

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: 20201221
  httpApi:
    cors: true
    # --------------------
    # cors:
    #   origin: '*'
    #   headers:
    #     - Content-Type
    #     - X-Amz-Date
    #     - Authorization
    #     - X-Api-Key
    #     - X-Amz-Security-Token
    #   allowCredentials: false
    # --------------------
    # allowedOrigins:
    #     - '*'
    # allowedMethods:
    #   - GET
    #   - OPTIONS
    #   - POST
    #   - PUT
    #   - DELETE
    # allowedHeaders:
    #   - Content-Type
    #   - X-Amz-Date
    #   - Authorization
    #   - X-Api-Key
    #   - X-Amz-Security-Token
    #   - X-Amz-User-Agent
    #   - X-Transaction-Key
    #   - Access-Control-Allow-Origin

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${env:DEPLOY_STAGE}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # iamRoleStatements:
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - sns:SetSMSAttributes
            - sns:Publish
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource: "*"

functions:
  ## ----------------------------------------------------------------------------------
  ## ----------------------------------------------------------------------------------
  ## ---- API ENDPOINTS ::
  ## ----------------------------------------------------------------------------------
  ## ----------------------------------------------------------------------------------
  create:
    handler: lambdas/notes/create.main
    events:
      - http:
          path: notes
          method: post
          authorizer: aws_iam
  get:
    handler: lambdas/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          authorizer: aws_iam
  list:
    handler: lambdas/notes/list.main
    events:
      - http:
          path: notes
          method: get
          authorizer: aws_iam
  update:
    handler: lambdas/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          authorizer: aws_iam
  delete:
    handler: lambdas/notes/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          authorizer: aws_iam
  purchases:
    handler: lambdas/purchases/list.main
    events:
      - http:
          path: purchases
          method: get
          authorizer: aws_iam
  billing:
    handler: lambdas/purchases/billing.main
    events:
      - http:
          path: billing
          method: post
          authorizer: aws_iam
  sendSMS:
    handler: lambdas/endpoints/sendSMS.handler
    events:
      - http:
          path: send-sms
          method: POST
          authorizer: aws_iam
  deviceActivate:
    handler: lambdas/tvapps/deviceActivate.handler
    events:
      - http:
          path: device-activate
          method: POST
          authorizer: aws_iam
  stripeSuccessfulCheckoutWebhook:
    handler: lambdas/webhooks/stripeSuccessfulCheckout.handler
    events:
      - http:
          path: confirm-stripe-checkout
          method: POST
  stripeHandleSubscriptionsWebhook:
    handler: lambdas/webhooks/stripeHandleSubscriptions.handler
    events:
      - http:
          path: handle-stripe-subscriptions
          method: POST
  stripeHandleInvoiceWebhook:
    handler: lambdas/webhooks/stripeHandleInvoice.handler
    events:
      - http:
          path: handle-stripe-invoice
          method: POST
  stripeEverythingWebhook:
    handler: lambdas/webhooks/stripeEverything.handler
    events:
      - http:
          path: everything
          method: POST
  stripePaymentIntentSuccessWebhook:
    handler: lambdas/webhooks/stripePaymentIntentSuccess.handler
    events:
      - http:
          path: payment-intent-success
          method: POST
  stripeChargeSuccessWebhook:
    handler: lambdas/webhooks/stripeChargeSuccess.handler
    events:
      - http:
          path: charge-success
          method: POST
  fetchUserMetaByEmail:
    handler: lambdas/endpoints/users/getUserMetaData.handler
    events:
      - http:
          path: user-meta
          method: POST
  fetchAllPurchaseables:
    handler: lambdas/endpoints/purchaseables/getAllPurchaseables.handler
    events:
      - http:
          path: all-purchaseables
          method: GET
  player-analytics:
    handler: lambdas/analytics/playerAnalytics.handler
    events:
      - http:
          path: api/v1/player-analytics
          method: POST
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  create-channel-media-live:
    handler: lambdas/medialive/createChannelMediaLive.handler
    events:
      - http:
          path: api/v1/create-channel-media-live
          method: POST
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  create-channel-media-package:
    handler: lambdas/medialive/createChannelMediaPackage.handler
    events:
      - http:
          path: api/v1/create-channel-media-package
          method: POST
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  create-origin-endpoint-media-package:
    handler: lambdas/medialive/createOriginEndpointMediaPackage.handler
    events:
      - http:
          path: api/v1/create-origin-endpoint-media-package
          method: POST
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-channels-media-package:
    handler: lambdas/medialive/listChannelsMediaPackage.handler
    events:
      - http:
          path: api/v1/list-channels-media-package
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-channels-media-live:
    handler: lambdas/medialive/listChannelsMediaLive.handler
    events:
      - http:
          path: api/v1/list-channels-media-live
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-input-devices-media-live:
    handler: lambdas/medialive/listInputDevicesMediaLive.handler
    events:
      - http:
          path: api/v1/list-input-devices-media-live
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-inputs-media-live:
    handler: lambdas/medialive/listInputsMediaLive.handler
    events:
      - http:
          path: api/v1/list-inputs-media-live
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  describe-channel-media-live:
    handler: lambdas/medialive/describeChannelMediaLive.handler
    events:
      - http:
          path: api/v1/describe-channel-media-live/{channelId}
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stop-channel-media-live:
    handler: lambdas/medialive/stopChannelMediaLive.handler
    events:
      - http:
          path: api/v1/stop-channel-media-live
          method: PUT
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  start-channel-media-live:
    handler: lambdas/medialive/startChannelMediaLive.handler
    events:
      - http:
          path: api/v1/start-channel-media-live
          method: PUT
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  delete-channel-media-live:
    handler: lambdas/medialive/deleteChannelMediaLive.handler
    events:
      - http:
          path: api/v1/delete-channel-media-live
          method: PUT
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  describe-harvest-job:
    handler: lambdas/medialive/describeHarvestJob.handler
    events:
      - http:
          path: api/v1/describe-harvest-job/{jobId}
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-harvest-jobs:
    handler: lambdas/medialive/listHarvestJobs.handler
    events:
      - http:
          path: api/v1/list-harvest-jobs
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  create-harvest-job:
    handler: lambdas/medialive/createHarvestJob.handler
    events:
      - http:
          path: api/v1/create-harvest-job
          method: POST
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  list-origin-endpoints:
    handler: lambdas/medialive/listOriginEndpoints.handler
    events:
      - http:
          path: api/v1/list-origin-endpoints
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  describe-origin-endpoint:
    handler: lambdas/medialive/describeOriginEndpoint.handler
    events:
      - http:
          path: api/v1/describe-origin-endpoint/{channelId}
          method: GET
          authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  ## ----------------------------------------------------------------------------------
  ## ---- Stripe Integreation ::
  stripe-api-map:
    handler: lambdas/endpoints/stripe/apiMap.handler
    events:
      - http:
          path: api/v1/stripe-api-map
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-payment-intent:
    handler: lambdas/endpoints/stripe/createPaymentIntent.handler
    events:
      - http:
          path: api/v1/stripe-create-payment-intent
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-customer:
    handler: lambdas/endpoints/stripe/createCustomer.handler
    events:
      - http:
          path: api/v1/stripe-create-customer
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-update-customer-default-payment-method:
    handler: lambdas/endpoints/stripe/updateCustomerDefaultPaymentMethod.handler
    events:
      - http:
          path: api/v1/stripe-update-customer-default-payment-method
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-attach-payment-method:
    handler: lambdas/endpoints/stripe/attachPaymentMethod.handler
    events:
      - http:
          path: api/v1/stripe-attach-payment-method
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-detach-payment-method:
    handler: lambdas/endpoints/stripe/detachPaymentMethod.handler
    events:
      - http:
          path: api/v1/stripe-detach-payment-method
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-update-payment-method:
    handler: lambdas/endpoints/stripe/updatePaymentMethod.handler
    events:
      - http:
          path: api/v1/stripe-update-payment-method
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-price:
    handler: lambdas/endpoints/stripe/createPrice.handler
    events:
      - http:
          path: api/v1/stripe-create-price
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-reoccuring-price:
    handler: lambdas/endpoints/stripe/createReoccuringPrice.handler
    events:
      - http:
          path: api/v1/stripe-create-reoccuring-price
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-product:
    handler: lambdas/endpoints/stripe/createProduct.handler
    events:
      - http:
          path: api/v1/stripe-create-product
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-retrieve-product:
    handler: lambdas/endpoints/stripe/retrieveProduct.handler
    events:
      - http:
          path: api/v1/stripe-retrieve-product
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-list-products:
    handler: lambdas/endpoints/stripe/listProducts.handler
    events:
      - http:
          path: api/v1/stripe-list-products
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-update-product:
    handler: lambdas/endpoints/stripe/updateProduct.handler
    events:
      - http:
          path: api/v1/stripe-update-product
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-subscription:
    handler: lambdas/endpoints/stripe/createSubscription.handler
    events:
      - http:
          path: api/v1/stripe-create-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-update-subscription:
    name: stripeUpdateSubscription
    handler: lambdas/endpoints/stripe/updateSubscription.handler
    events:
      - http:
          path: api/v1/stripe-update-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-cancel-subscription:
    handler: lambdas/endpoints/stripe/cancelSubscription.handler
    events:
      - http:
          path: api/v1/stripe-cancel-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-cancel-subscription-eop:
    name: stripeCancelSubscriptionEop
    handler: lambdas/endpoints/stripe/cancelSubscriptionEOP.handler
    events:
      - http:
          path: api/v1/stripe-cancel-subscription-eop
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-pause-subscription:
    handler: lambdas/endpoints/stripe/pauseSubscription.handler
    events:
      - http:
          path: api/v1/stripe-pause-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-resume-subscription:
    handler: lambdas/endpoints/stripe/resumeSubscription.handler
    events:
      - http:
          path: api/v1/stripe-resume-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-retrieve-subscription:
    handler: lambdas/endpoints/stripe/retrieveSubscription.handler
    events:
      - http:
          path: api/v1/stripe-retrieve-subscription
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  stripe-create-customer-portal-session:
    handler: lambdas/endpoints/stripe/createCustomerPortalSession.handler
    events:
      - http:
          path: api/v1/stripe-create-customer-portal-session
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  ## ----------------------------------------------------------------------------------
  ## ---- data ingestion
  ingest-vod-merchandise:
    handler: lambdas/endpoints/graphql/ingestVODmerchandise.handler
    events:
      - http:
          path: api/v1/vod-merchandise-ingest
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  delete-all-vod-merchandise:
    handler: lambdas/endpoints/graphql/deleteAllVODmerchandise.handler
    events:
      - http:
          path: api/v1/vod-merchandise-delete-all
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  delete-vod-merchandise-by-id:
    handler: lambdas/endpoints/graphql/deleteVODmerchandiseById.handler
    events:
      - http:
          path: api/v1/vod-merchandise-delete-by-id
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  retrieve-cloudfront-url:
    handler: lambdas/endpoints/cloudfront/retrieveUrl.handler
    events:
      - http:
          path: api/v1/retrieve-cloudfront-url
          method: any
          # authorizer: aws_iam
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Accept
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  ## ------------------------------------------------------------------------------
  ## ---- CRONS
  # daily-activity-cron:
  #   handler: lambdas/crons/dailyActivityCron.handler
  #   events:
  #     - schedule:
  #         rate: cron(0 18 * * ? *)
  #         enabled: true
  # monthly-activity-cron:
  #   handler: lambdas/crons/monthlyActivityCron.handler
  #   events:
  #     - schedule:
  #         rate: cron(10 18 1 * ? *)
  #         enabled: true
  # send-mail-cron:
  #   handler: lambdas/crons/sendMailCron.handler
  #   events:
  #     - schedule:
  #         rate: cron(20 18 * * ? *)
  #         enabled: true
## ----------------------------------------------------------------------------------
# parameters:
#   AppSecurityGroupParameter:
#     Type: String
#     Default: sg-0d83d2d74da4d13a0
#   AppSubnet1Parameter:
#     Type: String
#     Default: subnet-07c41b4d72bb633ba
#   AppSubnet2Parameter:
#     Type: String
#     Default: subnet-0a5b45ebc47fbda66

# Create our resources with separate CloudFormation templates
# outputs:
#   StripeDashcancelDashsubscriptionDasheopFunctionArn:
#     Value:
#       Fn::GetAtt:
#         - StripeDashcancelDashsubscriptionDasheopLambdaVersionW9VDbSuyXREO1ZpULVVO1JWnnGlx9h0tELcbD9Y6vQ
#         - Arn
#   StripeDashupdateDashsubscriptionFunctionArn:
#     Value:
#       Fn::GetAtt:
#         - StripeDashupdateDashsubscriptionLambdaVersionzUvb82dmJJCFPcM4QLiZOHcsbavfy2glUhplJZ9frQ
#         - Arn
resources:
  # - Parameters:
  #     # AppSecurityGroupParameter:
  #     #   Type: String
  #     #   Default: sg-0d83d2d74da4d13a0
  #     # AppSubnet1Parameter:
  #     #   Type: String
  #     #   Default: subnet-07c41b4d72bb633ba
  #     # AppSubnet2Parameter:
  #     #   Type: String
  #     #   Default: subnet-0a5b45ebc47fbda66
  #     StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter:
  #       Type: String
  #       # Default: arn:aws:lambda:us-east-1:570573558182:function:branchdna-api-prod-stripe-cancel-subscription-eop
  #       Default: branchdna-api-prod-stripe-cancel-subscription-eop
  #     StripeDashupdateDashsubscriptionLambdaFunctionParameter:
  #       Type: String
  #       # Default: arn:aws:lambda:us-east-1:570573558182:function:branchdna-api-prod-stripe-update-subscription
  #       Default: branchdna-api-prod-stripe-update-subscription
  #     CreateLambdaFunctionParameter:
  #       Type: String
  #       # Default: arn:aws:lambda:us-east-1:570573558182:function:branchdna-api-prod-stripe-update-subscription
  #       Default: branchdna-api-prod-create
  #     CreateOriginEndpointMediaPackageLambdaFunctionParameter:
  #       Type: String
  #       # Default: arn:aws:lambda:us-east-1:570573558182:function:branchdna-api-prod-stripe-update-subscription
  #       Default: branchdna-api-prod-create-origin-endpoint-media-package
  # - Resources:
  #     StackOneAddingVersionToLambda:
  #       Type: AWS::CloudFormation::Stack
  #       Properties:
  #         Parameters:
  #           # AppSecurityGroupParameter: !Ref AppSecurityGroupParameter
  #           # AppSubnet1Parameter: !Ref AppSubnet1Parameter
  #           # AppSubnet2Parameter: !Ref AppSubnet2Parameter
  #           StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter: !Ref StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter
  #           StripeDashupdateDashsubscriptionLambdaFunctionParameter: !Ref StripeDashupdateDashsubscriptionLambdaFunctionParameter
  #           CreateLambdaFunctionParameter: !Ref CreateLambdaFunctionParameter
  #           CreateOriginEndpointMediaPackageLambdaFunctionParameter: !Ref CreateOriginEndpointMediaPackageLambdaFunctionParameter

  #         TemplateURL: https://s3.amazonaws.com/cf-templates-13d1wmp1xumw-us-east-1/2023-03-26T184536.828Zpyp-9nestedstack2
  #     StackTwoAddingVersionToLambda:
  #       Type: AWS::CloudFormation::Stack
  #       Properties:
  #         Parameters:
  #           AppSecurityGroupParameter: !Ref AppSecurityGroupParameter
  #           AppSubnet1Parameter: !Ref AppSubnet1Parameter
  #           AppSubnet2Parameter: !Ref AppSubnet2Parameter
  #           StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter: !Ref StripeDashcancelDashsubscriptionDasheopLambdaFunctionParameter
  #           StripeDashupdateDashsubscriptionLambdaFunctionParameter: !Ref StripeDashupdateDashsubscriptionLambdaFunctionParameter
  #         TemplateURL: https://s3.amazonaws.com/cf-templates-13d1wmp1xumw-us-east-1/2023-03-26T184536.828Zpyp-9nestedstack2
  #         # TemplateURL: https://cf-templates-13d1wmp1xumw-us-east-1.s3.amazonaws.com/2023-03-26T184536.828Zpyp-9nestedstack2
  #         # TemplateURL: s3://cf-templates-13d1wmp1xumw-us-east-1/2023-03-26T184536.828Zpyp-9nestedstack2
  #         # TemplateURL: https://cf-templates-13d1wmp1xumw-us-east-1.s3.amazonaws.com/2023-03-26T184536.828Zpyp-9nestedstack2

  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # API Gateway Socket Definition and Handlers
  # - ${file(resources/socket-definition-and-handlers.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  #Route 53 Zone
  - ${file(resources/route53.yml)}
  #ElastiCache
  # - ${file(resources/elasticache.yml)}
  #RDS
  # - ${file(resources/rds.yml)}
  # #SQS
  # - ${file(resources/sqs-fifo.yml)}
  #Linux Bastion
  - ${file(resources/linux-bastion.yml)}
